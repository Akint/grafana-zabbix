{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"react\"","webpack:///external \"lodash\"","webpack:///external \"moment\"","webpack:///./datasource-zabbix/utils.js","webpack:///external \"jquery\"","webpack:///external \"app/plugins/sdk\"","webpack:///./datasource-zabbix/constants.js","webpack:///external \"angular\"","webpack:///external \"app/core/core_module\"","webpack:///external \"app/core/utils/datemath\"","webpack:///./datasource-zabbix/migrations.ts","webpack:///./datasource-zabbix/metricFunctions.js","webpack:///./datasource-zabbix/zabbix/connectors/dbConnector.js","webpack:///external \"@grafana/ui\"","webpack:///./datasource-zabbix/responseHandler.js","webpack:///./datasource-zabbix/zabbix/connectors/zabbix_api/zabbixAPICore.js","webpack:///./datasource-zabbix/module.js","webpack:///./datasource-zabbix/datasource.js","webpack:///external \"app/core/config\"","webpack:///./datasource-zabbix/dataProcessor.js","webpack:///./datasource-zabbix/timeseries.js","webpack:///external \"app/core/table_model\"","webpack:///./datasource-zabbix/zabbix/zabbix.js","webpack:///./datasource-zabbix/zabbix/proxy/cachingProxy.js","webpack:///./datasource-zabbix/zabbix/connectors/zabbix_api/zabbixAPIConnector.js","webpack:///./datasource-zabbix/zabbix/connectors/sql/sqlConnector.js","webpack:///./datasource-zabbix/zabbix/connectors/sql/mysql.js","webpack:///./datasource-zabbix/zabbix/connectors/sql/postgres.js","webpack:///./datasource-zabbix/zabbix/connectors/influxdb/influxdbConnector.js","webpack:///./datasource-zabbix/query.controller.js","webpack:///./datasource-zabbix/config.controller.js","webpack:///./datasource-zabbix/zabbixAlerting.service.js","webpack:///./datasource-zabbix/add-metric-function.directive.js","webpack:///./datasource-zabbix/react2angular.ts","webpack:///./datasource-zabbix/components/FunctionEditorControls.tsx","webpack:///./datasource-zabbix/components/FunctionEditor.tsx","webpack:///./datasource-zabbix/metric-function-editor.directive.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__3__","expandItemName","expandItems","items","_","forEach","item","key_","containsMacro","itemName","MACRO_PATTERN","test","replaceMacro","macros","item_macros","match","macro","host_macros","filter","hostid","macro_def","find","macro_value","macro_regex","RegExp","replace","escapeMacro","splitTemplateQuery","query","split","isContainsBraces","result","map","part","trim","isRegex","str","regexPattern","isTemplateVariable","templateVariables","variables","variable","includes","buildRegex","matches","pattern","flags","undefined","escapeRegex","parseInterval","interval","momentInterval","exec","moment","duration","Number","valueOf","parseTimeShiftInterval","formatAcknowledges","acknowledges","length","formatted_acknowledges","each","ack","timestamp","unix","clock","format","alias","surname","message","concat","convertToZabbixAPIUrl","url","callOnce","func","promiseKeeper","Promise","resolve","apply","this","arguments","then","sequence","funcsArray","isValidVersion","version","versionPattern","parseVersion","major","minor","patch","meta","compactQuery","getArrayDepth","a","level","elem","isArray","key_params","paramStr","params","quoted","in_array","param","symbol","push","splitKeyParams","substring","indexOf","lastIndexOf","contains","__WEBPACK_EXTERNAL_MODULE__5__","__WEBPACK_EXTERNAL_MODULE__7__","DATAPOINT_VALUE","DATAPOINT_TS","MODE_METRICS","MODE_ITSERVICE","MODE_TEXT","MODE_ITEMID","MODE_TRIGGERS","SEV_NOT_CLASSIFIED","SEV_INFORMATION","SEV_WARNING","SEV_AVERAGE","SEV_HIGH","SEV_DISASTER","SHOW_ALL_TRIGGERS","SHOW_ALL_EVENTS","SHOW_OK_EVENTS","ZBX_ACK_ACTION_NONE","ZBX_ACK_ACTION_ACK","ZBX_ACK_ACTION_ADD_MESSAGE","TRIGGER_SEVERITY","val","text","__WEBPACK_EXTERNAL_MODULE__12__","__WEBPACK_EXTERNAL_MODULE__14__","__WEBPACK_EXTERNAL_MODULE__18__","__webpack_exports__","isGrafana2target","migrateFrom2To3version","migrate","DS_CONFIG_SCHEMA","migrateDSConfig","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","target","hostFilter","itemFilter","downsampleFunction","host","group","convertToRegex","application","resultFormat","Array","fixTargetGroup","functions","_i","_a","f","def","migratePercentileAgg","jsonData","dbConnection","isEmpty","schema","shouldMigrateDSConfig","oldVersion","dbConnectionOptions","dbConnectionEnable","enable","dbConnectionDatasourceId","datasourceId","createFuncInstance","funcDef","isString","index","FuncInstance","getFuncDef","getCategories","categories","Transform","Aggregate","Filter","Trends","Time","Alias","Special","addFuncDef","defaultParams","category","shortName","type","options","funcList","catName","sortBy","_classCallCheck","slice","updateText","metricFunctions","bindedFunc","partial","metricExp","parameters","paramType","$","isNumeric","unshift","join","strValue","optional","_hasMultipleParamsInString","partVal","idx","updateParam","splice","DEFAULT_QUERY_LIMIT","HISTORY_TO_TABLE_MAP","0","1","2","3","4","TREND_TO_TABLE_MAP","consolidateByFunc","avg","min","max","sum","count","consolidateByTrendColumns","DBConnector","datasourceSrv","datasourceName","datasourceTypeId","datasourceTypeName","_this","loadDatasource","ds","id","ZabbixNotImplemented","history","time_series","addHostName","hosts","uniqBy","flatten","grafanaSeries","compact","series","itemid","keys","datapoints","cloneDeep","points","convertGrafanaTSResponse","dsId","dsName","getAll","reject","methodName","code","defaults","__WEBPACK_EXTERNAL_MODULE__29__","convertHistory","convertPointCallback","grouped_history","groupBy","hist","convertText","point","textFilter","extractText","useCaptureGroups","Math","round","extractedValue","convertHistoryPoint","convertTrendPoint","valueType","value_min","value_max","value_avg","value_sum","value_count","handleHistory","handleTrends","handleText","handleHistoryAsTable","table","TableModel","addColumn","itemHistory","lastPoint","last","lastValue","skipEmptyValues","first","rows","handleSLAResponse","itservice","slaProperty","slaObject","targetSLA","serviceid","sla","targetStatus","parseInt","status","to","from","handleTriggersResponse","triggers","groups","timeRange","stats","uniq","flattenDeep","trigger","5","priority","getTriggerStats","groupNames","orderBy","severity","severity_stats","row","toPairs","_lodash2","default","_toConsumableArray","triggersCount","err","console","log","sortTimeseries","timeseries","ZabbixAPICore","backendSrv","$inject","api_url","auth","requestData","jsonrpc","method","ZabbixAPIError","data","headers","requestOptions","withCredentials","Authorization","basicAuth","datasourceRequest","response","error","username","password","user","request","AnnotationsQueryCtrl","QueryOptionsCtrl","QueryCtrl","ConfigCtrl","Datasource","_sdk","_datasource","_query","_config","ZabbixQueryOptionsController","templateUrl","ZabbixAnnotationsQueryController","ZabbixDSConfigController","dark","loadPluginCss","light","ZabbixQueryController","zabbixTemplateFormat","replaceTemplateVars","templateSrv","_interopRequireDefault","_config2","dateMath","_interopRequireWildcard","utils","migrations","_dataProcessor2","_responseHandler2","_zabbix","_zabbixAPICore","obj","newObj","DEFAULT_ZABBIX_VERSION","ZabbixDatasource","instanceSettings","instance","Constructor","TypeError","zabbixAlertingSrv","enableDebugLog","buildInfo","env","trends","trendsFrom","trendsRange","ttl","cacheTTL","alertingEnabled","alerting","addThresholds","alertingMinSeverity","disableReadOnlyUsersAck","zabbixVersion","enableDirectDBConnection","dbConnectionDatasourceName","dbConnectionRetentionPolicy","zabbixOptions","zabbix","Zabbix","_createClass","promises","targets","hide","timeFrom","range","timeTo","parse","removeZabbixThreshold","panelId","alert","thresholds","threshold","setPanelThreshold","replaceTargetVariables","ceil","timeFunctions","bindFunctionDefs","queryNumericData","_utils$sequence","_utils$sequence2","queryTextData","useTrends","isUseTrends","itemids","queryItemIdData","all","queryITServiceData","_this3","getTrendValueType","consolidateBy","getConsolidateBy","getTrends","getHistoryTS","applyDataProcessingFunctions","downsampleSeries","filterFunctions","timeseries_data","trendValueFunc","trendFunctions","transformFunctions","aggregationFunctions","aliasFunctions","aggFuncNames","dp","findLast","applyTimeShiftFunction","responseHandler","getVersion","parts","template","zipObject","app","_this8","getHosts","getItems","getGroups","metrics","formatMetric","triggerName","annotation","_this9","description","showOkEvents","hideHostsInMaintenance","indexedTriggers","minseverity","getEvents","objectids","triggersOptions","keyBy","hideAcknowledged","events","tags","title","event","time","objectid","downsample","ts","groupBy_exported","_timeseries2","sumSeries","rate","scale","delta","offset","AVERAGE","MIN","MAX","MEDIAN","PERCENTILE","order","orderByFunc","sortByIteratee","orderByCallback","sortedTimeseries","values","aggregateWrapper","groupByCallback","sortedPoints","sortByTime","flattenedPoints","groupFunc","simpleMovingAverage","factor","scale_perf","expMovingAverage","movingAverage","exponentialMovingAverage","transformNull","aggregateBy","percentile","flattenDatapoints","aggregateFunc","median","SUM","COUNT","removeAboveValue","removeBelowValue","top","bottom","sortSeries","limit","timeShift","setAlias","direction","toLowerCase","setAliasByRegex","shift","replaceAlias","extractPattern","regexp","newAlias","unShiftTimeSeries","getPointTimeFrame","ms_interval","left","right","findNearestLeft","findNearestRight","linearInterpolation","pointIndex","groupBy_perf","points_sum","frame","points_num","downsampledSeries","timeWindow","frames","grouped","mapValues","point_frame_ts","frame_values","frame_value","frame_ts","POINT_TIMESTAMP","grouped_series","POINT_VALUE","new_timestamps","interpolated_timeseries","timestamps","new_point","append","prepend","new_points","difference","new_series","new_timeseries","interpolateSeries","j","deltaValue","newSeries","point_prev","valueDelta","timeDelta","w_avg","w_count","sma","w_sum","ema_cur","ema_prev","ema","values_non_null","getNonNullValues","sorted","floor","_dbConnector","_zabbixAPIConnector","REQUESTS_TO_PROXYFY","arr","arr2","REQUESTS_TO_BIND","cachingProxy","zabbixAPI","ZabbixAPIConnector","proxyfyRequests","bindRequests","connectorOptions","initDBConnector","proxyfyWithCache","dbConnector","getHistoryDB","getHistory","getTrendsDB","_this2","retentionPolicy","SQLConnector","_sqlConnector","_iteratorNormalCompletion","_iteratorError","_step","_iterator","iterator","next","done","_iteratorNormalCompletion2","_step2","_iterator2","REQUESTS_TO_CACHE","_iteratorNormalCompletion3","_iteratorError3","_step3","_iterator3","dbConnectorStatus","login","testDataSource","catch","dsType","filters","getApps","results","appFilterEmpty","_results","_slicedToArray","apps","groupFilter","getAllGroups","_this4","groupids","getAllHosts","_this5","hostids","appFilter","_this6","filterByQuery","_this7","appids","itemtype","showDisabledItems","hostIds","getHostIds","itServiceFilter","getITService","proxyFilter","filteredGroups","_results2","filteredApps","filteredHosts","proxy_ids","filtered","proxy","proxyid","proxy_hostid","proxies","getProxies","findByFilter","_timeRange","_timeRange2","_timeRange3","itservices","isOldVersion","itServices","itServiceIds","slaResponse","filterPattern","list","zbx_obj","filterByRegex","findByName","finded","filterByName","CachingProxy","cacheOptions","cache","cacheRequest","funcName","funcScope","self","cacheEnabled","hash","cacheObject","_isExpired","Date","now","getRequestHash","object_age","argsJson","getHash","JSON","stringify","args","String","len","chr","charCodeAt","_arr","_n","_d","_e","_s","sliceIterator","defineProperties","props","descriptor","configurable","writable","protoProps","staticProps","_constants","maxLoginAttempts","zabbixAPICore","getTrend","getTrend_ZBXNEXT1193","isNotAuthorized","loginErrorCount","loginOnce","loginPromise","action","eventid","eventids","real_hosts","output","sortfield","selectHosts","value_type","webitems","timeTill","grouped_items","sortorder","time_from","trend","time_till","serviceids","intervals","applicationids","showTriggers","maintenance","expandDescription","expandData","expandComment","monitored","skipDependent","selectGroups","selectItems","selectLastEvent","selectTags","lastChangeTill","lastChangeSince","showEvents","select_acknowledges","preservekeys","selectUsers","minSeverity","acknowledged","min_severity","filterTriggersByAcknowledge","lastEvent","_utils","_mysql2","supportedDatabases","_dbConnector2","postgres","_DBConnector","ReferenceError","sqlDialect","_get","getPrototypeOf","loadSQLDialect","subClass","superClass","constructor","setPrototypeOf","__proto__","_inherits","mysql","testQuery","intervalSec","intervalMs","aggFunction","historyQuery","valueColumn","trendsQuery","refId","rawSql","maxDataPoints","queries","TEST_QUERY","time_expression","ITEMID_FORMAT","InfluxDBConnector","_possibleConstructorReturn","influxDS","buildHistoryQuery","invokeInfluxDBQuery","handleInfluxHistoryResponse","seriesList","influxSeriesList","y","influxSeries","timeSeries","measurement","aggregation","buildWhereClause","_QueryCtrl","$scope","$injector","editorModes","datasource","editorMode","ITSERVICE","ITEMID","TRIGGERS","slaPropertyList","ackFilters","resultFormats","getGroupNames","getItemNames","getMetricNames","getITServices","getVariables","getTemplateVariables","$rootScope","$on","onVariableChange","init","metric","queryOptionsText","scopeDefaults","targetDefaults","initFilters","renderQueryOptionsText","suggestGroups","suggestHosts","suggestApps","suggestItems","metricList","addAllValue","hostList","appList","getAllApps","getAllItems","newTarget","targetChanged","isEqual","oldTarget","isContainsVariables","field","some","refresh","newFunc","moveAliasFuncLast","added","aliasFunc","showQueryOptions","onTargetBlur","optionsMap","forOwn","SUPPORTED_SQL_DS","defaultConfig","current","dbDataSources","getSupportedDBDataSources","zabbixVersions","loadCurrentDBDatasource","datasources","currentDs","ZabbixAlertingService","_angular2","dashboardSrv","getDashboardModel","fullscreen","panelContainers","alertState","isFullScreen","clientWidth","panelIndex","alertClass","findIndex","panelModels","panel","_jquery2","removeClass","addClass","getPanelModel","thresholdOptions","colorMode","fill","lineColor","containsThreshold","op","source","angular","$compile","inputTemplate","directive","buttonTemplate","$input","$button","reduce","getAllFunctionNames","click","submenu","createFunctionDropDownMenu","typeahead","allFunctions","minLength","updater","$apply","addFunction","keyup","toggleClass","focus","setTimeout","external_jquery_","external_react_","external_react_default","createElement","className","onClick","onDescriptionShow","window","open","DOCS_FUNC_REF_URL","onMoveLeft","onMoveRight","onRemove","style","display","width","justifyContent","_super","FunctionEditor","createRef","_b","_c","state","showingDescription","overflow","maxHeight","textAlign","fontWeight","color","FunctionEditorControls","__assign","updatePopperPosition","setState","render","ui_","content","renderContent","placement","hideAfter","showPopper","hidePopper","popperProps","Fragment","triggerRef","referenceElement","wrapperClassName","onMouseLeave","renderArrow","arrowProps","data-placement","ref","show","PureComponent","$funcLink","external_jquery_default","ctrl","scheduledRelink","paramCountAtLink","cancelBlur","clickFuncParam","paramIndex","$link","$comma","prev","select","lookup","paramDef","external_lodash_default","multiple","assign","switchToLink","inputElem","clearTimeout","newValue","html","highlightVariablesAsHtml","relink","hasClass","inputBlur","inputKeyPress","e","which","blur","inputKeyDown","addElementsAndCompile","appendTo","defParams","clone","lastParam","paramValue","hasValue","$paramLink","paramTemplate","attr","keypress","toString","$element","process","addTypeahead","contents","children","remove","handleRemoveFunction","removeFunction","handleMoveLeft","moveFunction","handleMoveRight","zabbixFunctionEditor","component","core_module_default"],"mappings":"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","file":"datasource-zabbix/module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 37);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","import _ from 'lodash';\nimport moment from 'moment';\n\n/**\n * Expand Zabbix item name\n *\n * @param  {string} name item name, ie \"CPU $2 time\"\n * @param  {string} key  item key, ie system.cpu.util[,system,avg1]\n * @return {string}      expanded name, ie \"CPU system time\"\n */\nexport function expandItemName(name, key) {\n\n  // extract params from key:\n  // \"system.cpu.util[,system,avg1]\" --> [\"\", \"system\", \"avg1\"]\n  let key_params_str = key.substring(key.indexOf('[') + 1, key.lastIndexOf(']'));\n  let key_params = splitKeyParams(key_params_str);\n\n  // replace item parameters\n  for (let i = key_params.length; i >= 1; i--) {\n    name = name.replace('$' + i, key_params[i - 1]);\n  }\n  return name;\n}\n\nexport function expandItems(items) {\n  _.forEach(items, item => {\n    item.item = item.name;\n    item.name = expandItemName(item.item, item.key_);\n    return item;\n  });\n  return items;\n}\n\nfunction splitKeyParams(paramStr) {\n  let params = [];\n  let quoted = false;\n  let in_array = false;\n  let split_symbol = ',';\n  let param = '';\n\n  _.forEach(paramStr, symbol => {\n    if (symbol === '\"' && in_array) {\n      param += symbol;\n    } else if (symbol === '\"' && quoted) {\n      quoted = false;\n    } else if (symbol === '\"' && !quoted) {\n      quoted = true;\n    } else if (symbol === '[' && !quoted) {\n      in_array  = true;\n    } else if (symbol === ']' && !quoted) {\n      in_array = false;\n    } else if (symbol === split_symbol && !quoted && !in_array) {\n      params.push(param);\n      param = '';\n    } else {\n      param += symbol;\n    }\n  });\n\n  params.push(param);\n  return params;\n}\n\nconst MACRO_PATTERN = /{\\$[A-Z0-9_\\.]+}/g;\n\nexport function containsMacro(itemName) {\n  return MACRO_PATTERN.test(itemName);\n}\n\nexport function replaceMacro(item, macros) {\n  let itemName = item.name;\n  let item_macros = itemName.match(MACRO_PATTERN);\n  _.forEach(item_macros, macro => {\n    let host_macros = _.filter(macros, m => {\n      if (m.hostid) {\n        return m.hostid === item.hostid;\n      } else {\n        // Add global macros\n        return true;\n      }\n    });\n\n    let macro_def = _.find(host_macros, { macro: macro });\n    if (macro_def && macro_def.value) {\n      let macro_value = macro_def.value;\n      let macro_regex = new RegExp(escapeMacro(macro));\n      itemName = itemName.replace(macro_regex, macro_value);\n    }\n  });\n\n  return itemName;\n}\n\nfunction escapeMacro(macro) {\n  macro = macro.replace(/\\$/, '\\\\\\$');\n  return macro;\n}\n\n/**\n * Split template query to parts of zabbix entities\n * group.host.app.item -> [group, host, app, item]\n * {group}{host.com} -> [group, host.com]\n */\nexport function splitTemplateQuery(query) {\n  let splitPattern = /\\{[^\\{\\}]*\\}|\\{\\/.*\\/\\}/g;\n  let split;\n\n  if (isContainsBraces(query)) {\n    let result = query.match(splitPattern);\n    split = _.map(result, part => {\n      return _.trim(part, '{}');\n    });\n  } else {\n    split = query.split('.');\n  }\n\n  return split;\n}\n\nfunction isContainsBraces(query) {\n  let bracesPattern = /^\\{.+\\}$/;\n  return bracesPattern.test(query);\n}\n\n// Pattern for testing regex\nexport const regexPattern = /^\\/(.*)\\/([gmi]*)$/m;\n\nexport function isRegex(str) {\n  return regexPattern.test(str);\n}\n\nexport function isTemplateVariable(str, templateVariables) {\n  var variablePattern = /^\\$\\w+/;\n  if (variablePattern.test(str)) {\n    var variables = _.map(templateVariables, variable => {\n      return '$' + variable.name;\n    });\n    return _.includes(variables, str);\n  } else {\n    return false;\n  }\n}\n\nexport function buildRegex(str) {\n  var matches = str.match(regexPattern);\n  var pattern = matches[1];\n  var flags = matches[2] !== \"\" ? matches[2] : undefined;\n  return new RegExp(pattern, flags);\n}\n\n// Need for template variables replace\n// From Grafana's templateSrv.js\nexport function escapeRegex(value) {\n  return value.replace(/[\\\\^$*+?.()|[\\]{}\\/]/g, '\\\\$&');\n}\n\nexport function parseInterval(interval) {\n  var intervalPattern = /(^[\\d]+)(y|M|w|d|h|m|s)/g;\n  var momentInterval = intervalPattern.exec(interval);\n  return moment.duration(Number(momentInterval[1]), momentInterval[2]).valueOf();\n}\n\nexport function parseTimeShiftInterval(interval) {\n  let intervalPattern = /^([\\+\\-]*)([\\d]+)(y|M|w|d|h|m|s)/g;\n  let momentInterval = intervalPattern.exec(interval);\n  let duration = 0;\n\n  if (momentInterval[1] === '+') {\n    duration = 0 - moment.duration(Number(momentInterval[2]), momentInterval[3]).valueOf();\n  } else {\n    duration = moment.duration(Number(momentInterval[2]), momentInterval[3]).valueOf();\n  }\n\n  return duration;\n}\n\n/**\n * Format acknowledges.\n *\n * @param  {array} acknowledges array of Zabbix acknowledge objects\n * @return {string} HTML-formatted table\n */\nexport function formatAcknowledges(acknowledges) {\n  if (acknowledges.length) {\n    var formatted_acknowledges = '<br><br>Acknowledges:<br><table><tr><td><b>Time</b></td>'\n      + '<td><b>User</b></td><td><b>Comments</b></td></tr>';\n    _.each(_.map(acknowledges, function (ack) {\n      var timestamp = moment.unix(ack.clock);\n      return '<tr><td><i>' + timestamp.format(\"DD MMM YYYY HH:mm:ss\") + '</i></td><td>' + ack.alias\n        + ' (' + ack.name + ' ' + ack.surname + ')' + '</td><td>' + ack.message + '</td></tr>';\n    }), function (ack) {\n      formatted_acknowledges = formatted_acknowledges.concat(ack);\n    });\n    formatted_acknowledges = formatted_acknowledges.concat('</table>');\n    return formatted_acknowledges;\n  } else {\n    return '';\n  }\n}\n\nexport function convertToZabbixAPIUrl(url) {\n  var zabbixAPIUrlPattern = /.*api_jsonrpc.php$/;\n  var trimSlashPattern = /(.*?)[\\/]*$/;\n  if (url.match(zabbixAPIUrlPattern)) {\n    return url;\n  } else {\n    return url.replace(trimSlashPattern, \"$1\");\n  }\n}\n\n/**\n * Wrap function to prevent multiple calls\n * when waiting for result.\n */\nexport function callOnce(func, promiseKeeper) {\n  return function() {\n    if (!promiseKeeper) {\n      promiseKeeper = Promise.resolve(\n        func.apply(this, arguments)\n        .then(result => {\n          promiseKeeper = null;\n          return result;\n        })\n      );\n    }\n    return promiseKeeper;\n  };\n}\n\n/**\n * Apply function one by one: `sequence([a(), b(), c()]) = c(b(a()))`\n * @param {*} funcsArray functions to apply\n */\nexport function sequence(funcsArray) {\n  return function(result) {\n    for (var i = 0; i < funcsArray.length; i++) {\n      result = funcsArray[i].call(this, result);\n    }\n    return result;\n  };\n}\n\nconst versionPattern = /^(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?(?:-([0-9A-Za-z\\.]+))?/;\n\nexport function isValidVersion(version) {\n  return versionPattern.exec(version);\n}\n\nexport function parseVersion(version) {\n  const match = versionPattern.exec(version);\n  if (!match) {\n    return null;\n  }\n  const major = Number(match[1]);\n  const minor = Number(match[2] || 0);\n  const patch = Number(match[3] || 0);\n  const meta = match[4];\n  return { major, minor, patch, meta };\n}\n\n/**\n * Replaces any space-like symbols (tabs, new lines, spaces) by single whitespace.\n */\nexport function compactQuery(query) {\n  return query.replace(/\\s+/g, ' ').trim();\n}\n\nexport function getArrayDepth(a, level = 0) {\n  if (a.length === 0) {\n    return 1;\n  }\n  const elem = a[0];\n  if (_.isArray(elem)) {\n    return getArrayDepth(elem, level + 1);\n  }\n  return level + 1;\n}\n\n// Fix for backward compatibility with lodash 2.4\nif (!_.includes) {\n  _.includes = _.contains;\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","// Data point\nexport const DATAPOINT_VALUE = 0;\nexport const DATAPOINT_TS = 1;\n\n// Editor modes\nexport const MODE_METRICS = 0;\nexport const MODE_ITSERVICE = 1;\nexport const MODE_TEXT = 2;\nexport const MODE_ITEMID = 3;\nexport const MODE_TRIGGERS = 4;\n\n// Triggers severity\nexport const SEV_NOT_CLASSIFIED = 0;\nexport const SEV_INFORMATION = 1;\nexport const SEV_WARNING = 2;\nexport const SEV_AVERAGE = 3;\nexport const SEV_HIGH = 4;\nexport const SEV_DISASTER = 5;\n\nexport const SHOW_ALL_TRIGGERS = [0, 1];\nexport const SHOW_ALL_EVENTS = [0, 1];\nexport const SHOW_OK_EVENTS = 1;\n\n// Acknowledge\nexport const ZBX_ACK_ACTION_NONE = 0;\nexport const ZBX_ACK_ACTION_ACK = 2;\nexport const ZBX_ACK_ACTION_ADD_MESSAGE = 4;\n\nexport const TRIGGER_SEVERITY = [\n  {val: 0, text: 'Not classified'},\n  {val: 1, text: 'Information'},\n  {val: 2, text: 'Warning'},\n  {val: 3, text: 'Average'},\n  {val: 4, text: 'High'},\n  {val: 5, text: 'Disaster'}\n];\n","module.exports = __WEBPACK_EXTERNAL_MODULE__12__;","module.exports = __WEBPACK_EXTERNAL_MODULE__14__;","module.exports = __WEBPACK_EXTERNAL_MODULE__18__;","import _ from 'lodash';\n\n/**\n * Query format migration.\n * This module can detect query format version and make migration.\n */\n\nexport function isGrafana2target(target) {\n  if (!target.mode || target.mode === 0 || target.mode === 2) {\n    if ((target.hostFilter || target.itemFilter || target.downsampleFunction ||\n        (target.host && target.host.host)) &&\n        (target.item.filter === undefined && target.host.filter === undefined)) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n\nexport function migrateFrom2To3version(target) {\n  target.group.filter = target.group.name === \"*\" ? \"/.*/\" : target.group.name;\n  target.host.filter = target.host.name === \"*\" ? convertToRegex(target.hostFilter) : target.host.name;\n  target.application.filter = target.application.name === \"*\" ? \"\" : target.application.name;\n  target.item.filter = target.item.name === \"All\" ? convertToRegex(target.itemFilter) : target.item.name;\n  return target;\n}\n\nexport function migrate(target) {\n  target.resultFormat = target.resultFormat || 'time_series';\n  target = fixTargetGroup(target);\n  if (isGrafana2target(target)) {\n    return migrateFrom2To3version(target);\n  }\n  migratePercentileAgg(target);\n  return target;\n}\n\nfunction fixTargetGroup(target) {\n  if (target.group && Array.isArray(target.group)) {\n    target.group = { 'filter': \"\" };\n  }\n  return target;\n}\n\nfunction convertToRegex(str) {\n  if (str) {\n    return '/' + str + '/';\n  } else {\n    return '/.*/';\n  }\n}\n\nfunction migratePercentileAgg(target) {\n  if (target.functions) {\n    for (const f of target.functions) {\n      if (f.def && f.def.name === 'percentil') {\n        f.def.name = 'percentile';\n      }\n    }\n  }\n}\n\nexport const DS_CONFIG_SCHEMA = 2;\nexport function migrateDSConfig(jsonData) {\n  if (!jsonData) {\n    jsonData = {};\n  }\n\n  if (!shouldMigrateDSConfig(jsonData)) {\n    return jsonData;\n  }\n\n  const oldVersion = jsonData.schema || 1;\n  jsonData.schema = DS_CONFIG_SCHEMA;\n\n  if (oldVersion < 2) {\n    const dbConnectionOptions = jsonData.dbConnection || {};\n    jsonData.dbConnectionEnable = dbConnectionOptions.enable || false;\n    jsonData.dbConnectionDatasourceId = dbConnectionOptions.datasourceId || null;\n    delete jsonData.dbConnection;\n  }\n\n  return jsonData;\n}\n\nfunction shouldMigrateDSConfig(jsonData): boolean {\n  if (jsonData.dbConnection && !_.isEmpty(jsonData.dbConnection)) {\n    return true;\n  }\n  if (jsonData.schema && jsonData.schema !== DS_CONFIG_SCHEMA) {\n    return true;\n  }\n  return false;\n}\n","import _ from 'lodash';\nimport $ from 'jquery';\n\nvar index = [];\nvar categories = {\n  Transform: [],\n  Aggregate: [],\n  Filter: [],\n  Trends: [],\n  Time: [],\n  Alias: [],\n  Special: []\n};\n\nfunction addFuncDef(funcDef) {\n  funcDef.params = funcDef.params || [];\n  funcDef.defaultParams = funcDef.defaultParams || [];\n\n  if (funcDef.category) {\n    categories[funcDef.category].push(funcDef);\n  }\n  index[funcDef.name] = funcDef;\n  index[funcDef.shortName || funcDef.name] = funcDef;\n}\n\n// Transform\n\naddFuncDef({\n  name: 'groupBy',\n  category: 'Transform',\n  params: [\n    { name: 'interval', type: 'string'},\n    { name: 'function', type: 'string', options: ['avg', 'min', 'max', 'sum', 'count', 'median'] }\n  ],\n  defaultParams: ['1m', 'avg'],\n});\n\naddFuncDef({\n  name: 'scale',\n  category: 'Transform',\n  params: [\n    { name: 'factor', type: 'float', options: [100, 0.01, 10, -1]}\n  ],\n  defaultParams: [100],\n});\n\naddFuncDef({\n  name: 'offset',\n  category: 'Transform',\n  params: [\n    { name: 'delta', type: 'float', options: [-100, 100]}\n  ],\n  defaultParams: [100],\n});\n\naddFuncDef({\n  name: 'delta',\n  category: 'Transform',\n  params: [],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'rate',\n  category: 'Transform',\n  params: [],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'movingAverage',\n  category: 'Transform',\n  params: [\n    { name: 'factor', type: 'int', options: [6, 10, 60, 100, 600] }\n  ],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'exponentialMovingAverage',\n  category: 'Transform',\n  params: [\n    { name: 'smoothing', type: 'float', options: [6, 10, 60, 100, 600] }\n  ],\n  defaultParams: [0.2],\n});\n\naddFuncDef({\n  name: 'removeAboveValue',\n  category: 'Transform',\n  params: [\n    {name: 'number', type: 'float'},\n  ],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'removeBelowValue',\n  category: 'Transform',\n  params: [\n    {name: 'number', type: 'float'},\n  ],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'transformNull',\n  category: 'Transform',\n  params: [\n    {name: 'number', type: 'float'}\n  ],\n  defaultParams: [0],\n});\n\n// Aggregate\n\naddFuncDef({\n  name: 'sumSeries',\n  category: 'Aggregate',\n  params: [],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'median',\n  category: 'Aggregate',\n  params: [\n    { name: 'interval', type: 'string'}\n  ],\n  defaultParams: ['1m'],\n});\n\naddFuncDef({\n  name: 'average',\n  category: 'Aggregate',\n  params: [\n    { name: 'interval', type: 'string' }\n  ],\n  defaultParams: ['1m'],\n});\n\naddFuncDef({\n  name: 'percentile',\n  category: 'Aggregate',\n  params: [\n    { name: 'interval', type: 'string' },\n    { name: 'percent', type: 'float', options: [25, 50, 75, 90, 95, 99, 99.9] }\n  ],\n  defaultParams: ['1m', 95],\n});\n\naddFuncDef({\n  name: 'min',\n  category: 'Aggregate',\n  params: [\n    { name: 'interval', type: 'string' }\n  ],\n  defaultParams: ['1m'],\n});\n\naddFuncDef({\n  name: 'max',\n  category: 'Aggregate',\n  params: [\n    { name: 'interval', type: 'string' }\n  ],\n  defaultParams: ['1m'],\n});\n\naddFuncDef({\n  name: 'sum',\n  category: 'Aggregate',\n  params: [\n    { name: 'interval', type: 'string' }\n  ],\n  defaultParams: ['1m'],\n});\n\naddFuncDef({\n  name: 'count',\n  category: 'Aggregate',\n  params: [\n    { name: 'interval', type: 'string' }\n  ],\n  defaultParams: ['1m'],\n});\n\naddFuncDef({\n  name: 'aggregateBy',\n  category: 'Aggregate',\n  params: [\n    { name: 'interval', type: 'string' },\n    { name: 'function', type: 'string', options: ['avg', 'min', 'max', 'sum', 'count', 'median'] }\n  ],\n  defaultParams: ['1m', 'avg'],\n});\n\n// Filter\n\naddFuncDef({\n  name: 'top',\n  category: 'Filter',\n  params: [\n    { name: 'number', type: 'int' },\n    { name: 'value', type: 'string', options: ['avg', 'min', 'max', 'sum', 'count', 'median'] }\n  ],\n  defaultParams: [5, 'avg'],\n});\n\naddFuncDef({\n  name: 'bottom',\n  category: 'Filter',\n  params: [\n    { name: 'number', type: 'int' },\n    { name: 'value', type: 'string', options: ['avg', 'min', 'max', 'sum', 'count', 'median'] }\n  ],\n  defaultParams: [5, 'avg'],\n});\n\naddFuncDef({\n  name: 'sortSeries',\n  category: 'Filter',\n  params: [\n    { name: 'direction', type: 'string', options: ['asc', 'desc'] }\n  ],\n  defaultParams: ['asc']\n});\n\n// Trends\n\naddFuncDef({\n  name: 'trendValue',\n  category: 'Trends',\n  params: [\n    { name: 'type', type: 'string', options: ['avg', 'min', 'max', 'sum', 'count'] }\n  ],\n  defaultParams: ['avg'],\n});\n\n// Time\n\naddFuncDef({\n  name: 'timeShift',\n  category: 'Time',\n  params: [\n    { name: 'interval', type: 'string', options: ['24h', '7d', '1M', '+24h', '-24h']}\n  ],\n  defaultParams: ['24h'],\n});\n\n//Alias\n\naddFuncDef({\n  name: 'setAlias',\n  category: 'Alias',\n  params: [\n    { name: 'alias', type: 'string' }\n  ],\n  defaultParams: []\n});\n\naddFuncDef({\n  name: 'setAliasByRegex',\n  category: 'Alias',\n  params: [\n    { name: 'aliasByRegex', type: 'string' }\n  ],\n  defaultParams: []\n});\n\naddFuncDef({\n  name: 'replaceAlias',\n  category: 'Alias',\n  params: [\n    { name: 'regexp', type: 'string' },\n    { name: 'newAlias', type: 'string' }\n  ],\n  defaultParams: ['/(.*)/', '$1']\n});\n\n// Special\naddFuncDef({\n  name: 'consolidateBy',\n  category: 'Special',\n  params: [\n    { name: 'type', type: 'string', options: ['avg', 'min', 'max', 'sum', 'count'] }\n  ],\n  defaultParams: ['avg'],\n});\n\n_.each(categories, function(funcList, catName) {\n  categories[catName] = _.sortBy(funcList, 'name');\n});\n\nclass FuncInstance {\n  constructor(funcDef, params) {\n    this.def = funcDef;\n\n    if (params) {\n      this.params = params;\n    } else {\n      // Create with default params\n      this.params = [];\n      this.params = funcDef.defaultParams.slice(0);\n    }\n\n    this.updateText();\n  }\n\n  bindFunction(metricFunctions) {\n    var func = metricFunctions[this.def.name];\n    if (func) {\n\n      // Bind function arguments\n      var bindedFunc = func;\n      var param;\n      for (var i = 0; i < this.params.length; i++) {\n        param = this.params[i];\n\n        // Convert numeric params\n        if (this.def.params[i].type === 'int' ||\n            this.def.params[i].type === 'float') {\n          param = Number(param);\n        }\n        bindedFunc = _.partial(bindedFunc, param);\n      }\n      return bindedFunc;\n    } else {\n      throw { message: 'Method not found ' + this.def.name };\n    }\n  }\n\n  render(metricExp) {\n    var str = this.def.name + '(';\n    var parameters = _.map(this.params, function(value, index) {\n\n      var paramType = this.def.params[index].type;\n      if (paramType === 'int' ||\n          paramType === 'float' ||\n          paramType === 'value_or_series' ||\n          paramType === 'boolean') {\n        return value;\n      }\n      else if (paramType === 'int_or_interval' && $.isNumeric(value)) {\n        return value;\n      }\n\n      return \"'\" + value + \"'\";\n\n    }, this);\n\n    if (metricExp) {\n      parameters.unshift(metricExp);\n    }\n\n    return str + parameters.join(', ') + ')';\n  }\n\n  _hasMultipleParamsInString(strValue, index) {\n    if (strValue.indexOf(',') === -1) {\n      return false;\n    }\n\n    return this.def.params[index + 1] && this.def.params[index + 1].optional;\n  }\n\n  updateParam(strValue, index) {\n    // handle optional parameters\n    // if string contains ',' and next param is optional, split and update both\n    if (this._hasMultipleParamsInString(strValue, index)) {\n      _.each(strValue.split(','), function(partVal, idx) {\n        this.updateParam(partVal.trim(), idx);\n      }, this);\n      return;\n    }\n\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    }\n    else {\n      this.params[index] = strValue;\n    }\n\n    this.updateText();\n  }\n\n  updateText() {\n    if (this.params.length === 0) {\n      this.text = this.def.name + '()';\n      return;\n    }\n\n    var text = this.def.name + '(';\n    text += this.params.join(', ');\n    text += ')';\n    this.text = text;\n  }\n}\n\nexport function createFuncInstance(funcDef, params) {\n  if (_.isString(funcDef)) {\n    if (!index[funcDef]) {\n      throw { message: 'Method not found ' + name };\n    }\n    funcDef = index[funcDef];\n  }\n  return new FuncInstance(funcDef, params);\n}\n\nexport function getFuncDef(name) {\n  return index[name];\n}\n\nexport function getCategories() {\n  return categories;\n}\n","import _ from 'lodash';\n\nexport const DEFAULT_QUERY_LIMIT = 10000;\nexport const HISTORY_TO_TABLE_MAP = {\n  '0': 'history',\n  '1': 'history_str',\n  '2': 'history_log',\n  '3': 'history_uint',\n  '4': 'history_text'\n};\n\nexport const TREND_TO_TABLE_MAP = {\n  '0': 'trends',\n  '3': 'trends_uint'\n};\n\nexport const consolidateByFunc = {\n  'avg': 'AVG',\n  'min': 'MIN',\n  'max': 'MAX',\n  'sum': 'SUM',\n  'count': 'COUNT'\n};\n\nexport const consolidateByTrendColumns = {\n  'avg': 'value_avg',\n  'min': 'value_min',\n  'max': 'value_max',\n  'sum': 'num*value_avg' // sum of sums inside the one-hour trend period\n};\n\n/**\n * Base class for external history database connectors. Subclasses should implement `getHistory()`, `getTrends()` and\n * `testDataSource()` methods, which describe how to fetch data from source other than Zabbix API.\n */\nexport class DBConnector {\n  constructor(options, datasourceSrv) {\n    this.datasourceSrv = datasourceSrv;\n    this.datasourceId = options.datasourceId;\n    this.datasourceName = options.datasourceName;\n    this.datasourceTypeId = null;\n    this.datasourceTypeName = null;\n  }\n\n  static loadDatasource(dsId, dsName, datasourceSrv) {\n    if (!dsName && dsId !== undefined) {\n      let ds = _.find(datasourceSrv.getAll(), {'id': dsId});\n      if (!ds) {\n        return Promise.reject(`Data Source with ID ${dsId} not found`);\n      }\n      dsName = ds.name;\n    }\n    if (dsName) {\n      return datasourceSrv.loadDatasource(dsName);\n    } else {\n      return Promise.reject(`Data Source name should be specified`);\n    }\n  }\n\n  loadDBDataSource() {\n    return DBConnector.loadDatasource(this.datasourceId, this.datasourceName, this.datasourceSrv)\n    .then(ds => {\n      this.datasourceTypeId = ds.meta.id;\n      this.datasourceTypeName = ds.meta.name;\n      if (!this.datasourceName) {\n        this.datasourceName = ds.name;\n      }\n      if (!this.datasourceId) {\n        this.datasourceId = ds.id;\n      }\n      return ds;\n    });\n  }\n\n  /**\n   * Send test request to datasource in order to ensure it's working.\n   */\n  testDataSource() {\n    throw new ZabbixNotImplemented('testDataSource()');\n  }\n\n  /**\n   * Get history data from external sources.\n   */\n  getHistory() {\n    throw new ZabbixNotImplemented('getHistory()');\n  }\n\n  /**\n   * Get trends data from external sources.\n   */\n  getTrends() {\n    throw new ZabbixNotImplemented('getTrends()');\n  }\n\n  handleGrafanaTSResponse(history, items, addHostName = true) {\n    return convertGrafanaTSResponse(history, items, addHostName);\n  }\n}\n\n// Define Zabbix DB Connector exception type for non-implemented methods\nexport class ZabbixNotImplemented {\n  constructor(methodName) {\n    this.code = null;\n    this.name = 'ZabbixNotImplemented';\n    this.message = `Zabbix DB Connector Error: method ${methodName || ''} should be implemented in subclass of DBConnector`;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n\n/**\n * Converts time series returned by the data source into format that Grafana expects\n * time_series is Array of series:\n * ```\n * [{\n *     name: string,\n *     points: Array<[value: number, timestamp: number]>\n * }]\n * ```\n */\nfunction convertGrafanaTSResponse(time_series, items, addHostName) {\n  //uniqBy is needed to deduplicate\n  var hosts = _.uniqBy(_.flatten(_.map(items, 'hosts')), 'hostid');\n  let grafanaSeries = _.map(_.compact(time_series), series => {\n    let itemid = series.name;\n    var item = _.find(items, {'itemid': itemid});\n    var alias = item.name;\n    //only when actual multi hosts selected\n    if (_.keys(hosts).length > 1 && addHostName) {\n      var host = _.find(hosts, {'hostid': item.hostid});\n      alias = host.name + \": \" + alias;\n    }\n    // CachingProxy deduplicates requests and returns one time series for equal queries.\n    // Clone is needed to prevent changing of series object shared between all targets.\n    let datapoints = _.cloneDeep(series.points);\n    return {\n      target: alias,\n      datapoints: datapoints\n    };\n  });\n\n  return _.sortBy(grafanaSeries, 'target');\n}\n\nconst defaults = {\n  DBConnector,\n  DEFAULT_QUERY_LIMIT,\n  HISTORY_TO_TABLE_MAP,\n  TREND_TO_TABLE_MAP,\n  consolidateByFunc,\n  consolidateByTrendColumns\n};\n\nexport default defaults;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__29__;","import _ from 'lodash';\nimport TableModel from 'grafana/app/core/table_model';\nimport * as c from './constants';\n\n/**\n * Convert Zabbix API history.get response to Grafana format\n *\n * @return {Array}            Array of timeseries in Grafana format\n *                            {\n *                               target: \"Metric name\",\n *                               datapoints: [[<value>, <unixtime>], ...]\n *                            }\n */\nfunction convertHistory(history, items, addHostName, convertPointCallback) {\n  /**\n   * Response should be in the format:\n   * data: [\n   *          {\n   *             target: \"Metric name\",\n   *             datapoints: [[<value>, <unixtime>], ...]\n   *          }, ...\n   *       ]\n   */\n\n  // Group history by itemid\n  var grouped_history = _.groupBy(history, 'itemid');\n  var hosts = _.uniqBy(_.flatten(_.map(items, 'hosts')), 'hostid');  //uniqBy is needed to deduplicate\n\n  return _.map(grouped_history, function(hist, itemid) {\n    var item = _.find(items, {'itemid': itemid});\n    var alias = item.name;\n    if (_.keys(hosts).length > 1 && addHostName) {   //only when actual multi hosts selected\n      var host = _.find(hosts, {'hostid': item.hostid});\n      alias = host.name + \": \" + alias;\n    }\n    return {\n      target: alias,\n      datapoints: _.map(hist, convertPointCallback)\n    };\n  });\n}\n\nfunction sortTimeseries(timeseries) {\n  // Sort trend data, issue #202\n  _.forEach(timeseries, series => {\n    series.datapoints = _.sortBy(series.datapoints, point => point[c.DATAPOINT_TS]);\n  });\n  return timeseries;\n}\n\nfunction handleHistory(history, items, addHostName = true) {\n  return convertHistory(history, items, addHostName, convertHistoryPoint);\n}\n\nfunction handleTrends(history, items, valueType, addHostName = true) {\n  var convertPointCallback = _.partial(convertTrendPoint, valueType);\n  return convertHistory(history, items, addHostName, convertPointCallback);\n}\n\nfunction handleText(history, items, target, addHostName = true) {\n  let convertTextCallback = _.partial(convertText, target);\n  return convertHistory(history, items, addHostName, convertTextCallback);\n}\n\nfunction handleHistoryAsTable(history, items, target) {\n  let table = new TableModel();\n  table.addColumn({text: 'Host'});\n  table.addColumn({text: 'Item'});\n  table.addColumn({text: 'Key'});\n  table.addColumn({text: 'Last value'});\n\n  let grouped_history = _.groupBy(history, 'itemid');\n  _.each(items, (item) => {\n    let itemHistory = grouped_history[item.itemid] || [];\n    let lastPoint = _.last(itemHistory);\n    let lastValue = lastPoint ? lastPoint.value : null;\n\n    if(target.options.skipEmptyValues && (!lastValue || lastValue === '')) {\n      return;\n    }\n\n    // Regex-based extractor\n    if (target.textFilter) {\n      lastValue = extractText(lastValue, target.textFilter, target.useCaptureGroups);\n    }\n\n    let host = _.first(item.hosts);\n    host = host ? host.name : \"\";\n\n    table.rows.push([\n      host, item.name, item.key_, lastValue\n    ]);\n  });\n\n  return table;\n}\n\nfunction convertText(target, point) {\n  let value = point.value;\n\n  // Regex-based extractor\n  if (target.textFilter) {\n    value = extractText(point.value, target.textFilter, target.useCaptureGroups);\n  }\n\n  return [\n    value,\n    point.clock * 1000 + Math.round(point.ns / 1000000)\n  ];\n}\n\nfunction extractText(str, pattern, useCaptureGroups) {\n  let extractPattern = new RegExp(pattern);\n  let extractedValue = extractPattern.exec(str);\n  if (extractedValue) {\n    if (useCaptureGroups) {\n      extractedValue = extractedValue[1];\n    } else {\n      extractedValue = extractedValue[0];\n    }\n  }\n  return extractedValue;\n}\n\nfunction handleSLAResponse(itservice, slaProperty, slaObject) {\n  var targetSLA = slaObject[itservice.serviceid].sla[0];\n  if (slaProperty.property === 'status') {\n    var targetStatus = parseInt(slaObject[itservice.serviceid].status);\n    return {\n      target: itservice.name + ' ' + slaProperty.name,\n      datapoints: [\n        [targetStatus, targetSLA.to * 1000]\n      ]\n    };\n  } else {\n    return {\n      target: itservice.name + ' ' + slaProperty.name,\n      datapoints: [\n        [targetSLA[slaProperty.property], targetSLA.from * 1000],\n        [targetSLA[slaProperty.property], targetSLA.to * 1000]\n      ]\n    };\n  }\n}\n\nfunction handleTriggersResponse(triggers, groups, timeRange) {\n  if (!_.isArray(triggers)) {\n    let triggersCount = null;\n    try {\n      triggersCount = Number(triggers);\n    } catch (err) {\n      console.log(\"Error when handling triggers count: \", err);\n    }\n    return {\n      target: \"triggers count\",\n      datapoints: [\n        [triggersCount, timeRange[1] * 1000]\n      ]\n    };\n  } else {\n    const stats = getTriggerStats(triggers);\n    const groupNames = _.map(groups, 'name');\n    let table = new TableModel();\n    table.addColumn({text: 'Host group'});\n    _.each(_.orderBy(c.TRIGGER_SEVERITY, ['val'], ['desc']), (severity) => {\n      table.addColumn({text: severity.text});\n    });\n    _.each(stats, (severity_stats, group) => {\n      if (_.includes(groupNames, group)) {\n        let row = _.map(_.orderBy(_.toPairs(severity_stats), (s) => s[0], ['desc']), (s) => s[1]);\n        row = _.concat([group], ...row);\n        table.rows.push(row);\n      }\n    });\n    return table;\n  }\n}\n\nfunction getTriggerStats(triggers) {\n  let groups = _.uniq(_.flattenDeep(_.map(triggers, (trigger) => _.map(trigger.groups, 'name'))));\n  // let severity = _.map(c.TRIGGER_SEVERITY, 'text');\n  let stats = {};\n  _.each(groups, (group) => {\n    stats[group] = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0}; // severity:count\n  });\n  _.each(triggers, (trigger) => {\n    _.each(trigger.groups, (group) => {\n      stats[group.name][trigger.priority]++;\n    });\n  });\n  return stats;\n}\n\nfunction convertHistoryPoint(point) {\n  // Value must be a number for properly work\n  return [\n    Number(point.value),\n    point.clock * 1000 + Math.round(point.ns / 1000000)\n  ];\n}\n\nfunction convertTrendPoint(valueType, point) {\n  var value;\n  switch (valueType) {\n    case \"min\":\n      value = point.value_min;\n      break;\n    case \"max\":\n      value = point.value_max;\n      break;\n    case \"avg\":\n      value = point.value_avg;\n      break;\n    case \"sum\":\n      value = point.value_sum;\n      break;\n    case \"count\":\n      value = point.value_count;\n      break;\n    default:\n      value = point.value_avg;\n  }\n\n  return [\n    Number(value),\n    point.clock * 1000\n  ];\n}\n\nexport default {\n  handleHistory,\n  convertHistory,\n  handleTrends,\n  handleText,\n  handleHistoryAsTable,\n  handleSLAResponse,\n  handleTriggersResponse,\n  sortTimeseries\n};\n\n// Fix for backward compatibility with lodash 2.4\nif (!_.uniqBy) {_.uniqBy = _.uniq;}\n","/**\n * General Zabbix API methods\n */\n\nexport class ZabbixAPICore {\n\n  /** @ngInject */\n  constructor(backendSrv) {\n    this.backendSrv = backendSrv;\n  }\n\n  /**\n   * Request data from Zabbix API\n   * @return {object}  response.result\n   */\n  request(api_url, method, params, options, auth) {\n    let requestData = {\n      jsonrpc: '2.0',\n      method: method,\n      params: params,\n      id: 1\n    };\n\n    if (auth === \"\") {\n      // Reject immediately if not authenticated\n      return Promise.reject(new ZabbixAPIError({data: \"Not authorised.\"}));\n    } else if (auth) {\n      // Set auth parameter only if it needed\n      requestData.auth = auth;\n    }\n\n    let requestOptions = {\n      method: 'POST',\n      url: api_url,\n      data: requestData,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    // Set request options for basic auth\n    if (options.basicAuth || options.withCredentials) {\n      requestOptions.withCredentials = true;\n    }\n    if (options.basicAuth) {\n      requestOptions.headers.Authorization = options.basicAuth;\n    }\n\n    return this.datasourceRequest(requestOptions);\n  }\n\n  datasourceRequest(requestOptions) {\n    return this.backendSrv.datasourceRequest(requestOptions)\n    .then((response) => {\n      if (!response.data) {\n        return Promise.reject(new ZabbixAPIError({data: \"General Error, no data\"}));\n      } else if (response.data.error) {\n\n        // Handle Zabbix API errors\n        return Promise.reject(new ZabbixAPIError(response.data.error));\n      }\n\n      // Success\n      return response.data.result;\n    });\n  }\n\n  /**\n   * Get authentication token.\n   * @return {string}  auth token\n   */\n  login(api_url, username, password, options) {\n    let params = {\n      user: username,\n      password: password\n    };\n    return this.request(api_url, 'user.login', params, options, null);\n  }\n\n  /**\n   * Get Zabbix API version\n   * Matches the version of Zabbix starting from Zabbix 2.0.4\n   */\n  getVersion(api_url, options) {\n    return this.request(api_url, 'apiinfo.version', [], options);\n  }\n}\n\n// Define zabbix API exception type\nexport class ZabbixAPIError {\n  constructor(error) {\n    this.code = error.code || null;\n    this.name = error.message || \"\";\n    this.data = error.data || \"\";\n    this.message = \"Zabbix API Error: \" + this.name + \" \" + this.data;\n  }\n\n  toString() {\n    return this.name + \" \" + this.data;\n  }\n}\n","import { loadPluginCss } from 'grafana/app/plugins/sdk';\nimport { ZabbixDatasource } from './datasource';\nimport { ZabbixQueryController } from './query.controller';\nimport { ZabbixDSConfigController } from './config.controller';\nimport './zabbixAlerting.service.js';\nimport './add-metric-function.directive';\nimport './metric-function-editor.directive';\n\nclass ZabbixQueryOptionsController {}\nZabbixQueryOptionsController.templateUrl = 'datasource-zabbix/partials/query.options.html';\n\nclass ZabbixAnnotationsQueryController {}\nZabbixAnnotationsQueryController.templateUrl = 'datasource-zabbix/partials/annotations.editor.html';\n\nZabbixQueryController.templateUrl = 'datasource-zabbix/partials/query.editor.html';\nZabbixDSConfigController.templateUrl = 'datasource-zabbix/partials/config.html';\n\nloadPluginCss({\n  dark: 'plugins/alexanderzobnin-zabbix-app/css/grafana-zabbix.dark.css',\n  light: 'plugins/alexanderzobnin-zabbix-app/css/grafana-zabbix.light.css'\n});\n\nexport {\n  ZabbixDatasource as Datasource,\n  ZabbixDSConfigController as ConfigCtrl,\n  ZabbixQueryController as QueryCtrl,\n  ZabbixQueryOptionsController as QueryOptionsCtrl,\n  ZabbixAnnotationsQueryController as AnnotationsQueryCtrl\n};\n","import _ from 'lodash';\nimport config from 'grafana/app/core/config';\nimport * as dateMath from 'grafana/app/core/utils/datemath';\nimport * as utils from './utils';\nimport * as migrations from './migrations';\nimport * as metricFunctions from './metricFunctions';\nimport * as c from './constants';\nimport dataProcessor from './dataProcessor';\nimport responseHandler from './responseHandler';\nimport { Zabbix } from './zabbix/zabbix';\nimport { ZabbixAPIError } from './zabbix/connectors/zabbix_api/zabbixAPICore';\n\nconst DEFAULT_ZABBIX_VERSION = 3;\n\nexport class ZabbixDatasource {\n\n  /** @ngInject */\n  constructor(instanceSettings, templateSrv, backendSrv, datasourceSrv, zabbixAlertingSrv) {\n    this.templateSrv = templateSrv;\n    this.zabbixAlertingSrv = zabbixAlertingSrv;\n\n    this.enableDebugLog = config.buildInfo.env === 'development';\n\n    // Use custom format for template variables\n    this.replaceTemplateVars = _.partial(replaceTemplateVars, this.templateSrv);\n\n    // General data source settings\n    this.name             = instanceSettings.name;\n    this.url              = instanceSettings.url;\n    this.basicAuth        = instanceSettings.basicAuth;\n    this.withCredentials  = instanceSettings.withCredentials;\n\n    const jsonData = migrations.migrateDSConfig(instanceSettings.jsonData);\n\n    // Zabbix API credentials\n    this.username         = jsonData.username;\n    this.password         = jsonData.password;\n\n    // Use trends instead history since specified time\n    this.trends           = jsonData.trends;\n    this.trendsFrom       = jsonData.trendsFrom || '7d';\n    this.trendsRange      = jsonData.trendsRange || '4d';\n\n    // Set cache update interval\n    var ttl = jsonData.cacheTTL || '1h';\n    this.cacheTTL = utils.parseInterval(ttl);\n\n    // Alerting options\n    this.alertingEnabled =     jsonData.alerting;\n    this.addThresholds =       jsonData.addThresholds;\n    this.alertingMinSeverity = jsonData.alertingMinSeverity || c.SEV_WARNING;\n\n    // Other options\n    this.disableReadOnlyUsersAck = jsonData.disableReadOnlyUsersAck;\n    this.zabbixVersion = jsonData.zabbixVersion || DEFAULT_ZABBIX_VERSION;\n\n    // Direct DB Connection options\n    this.enableDirectDBConnection = jsonData.dbConnectionEnable || false;\n    this.dbConnectionDatasourceId = jsonData.dbConnectionDatasourceId;\n    this.dbConnectionDatasourceName = jsonData.dbConnectionDatasourceName;\n    this.dbConnectionRetentionPolicy = jsonData.dbConnectionRetentionPolicy;\n\n    let zabbixOptions = {\n      url: this.url,\n      username: this.username,\n      password: this.password,\n      basicAuth: this.basicAuth,\n      withCredentials: this.withCredentials,\n      zabbixVersion: this.zabbixVersion,\n      cacheTTL: this.cacheTTL,\n      enableDirectDBConnection: this.enableDirectDBConnection,\n      dbConnectionDatasourceId: this.dbConnectionDatasourceId,\n      dbConnectionDatasourceName: this.dbConnectionDatasourceName,\n      dbConnectionRetentionPolicy: this.dbConnectionRetentionPolicy,\n    };\n\n    this.zabbix = new Zabbix(zabbixOptions, datasourceSrv, backendSrv);\n  }\n\n  ////////////////////////\n  // Datasource methods //\n  ////////////////////////\n\n  /**\n   * Query panel data. Calls for each panel in dashboard.\n   * @param  {Object} options   Contains time range, targets and other info.\n   * @return {Object} Grafana metrics object with timeseries data for each target.\n   */\n  query(options) {\n    // Get alerts for current panel\n    if (this.alertingEnabled) {\n      this.alertQuery(options).then(alert => {\n        this.zabbixAlertingSrv.setPanelAlertState(options.panelId, alert.state);\n\n        this.zabbixAlertingSrv.removeZabbixThreshold(options.panelId);\n        if (this.addThresholds) {\n          _.forEach(alert.thresholds, threshold => {\n            this.zabbixAlertingSrv.setPanelThreshold(options.panelId, threshold);\n          });\n        }\n      });\n    }\n\n    // Create request for each target\n    let promises = _.map(options.targets, t => {\n      // Don't request for hidden targets\n      if (t.hide) {\n        return [];\n      }\n\n      let timeFrom = Math.ceil(dateMath.parse(options.range.from) / 1000);\n      let timeTo = Math.ceil(dateMath.parse(options.range.to) / 1000);\n\n      // Prevent changes of original object\n      let target = _.cloneDeep(t);\n\n      // Migrate old targets\n      target = migrations.migrate(target);\n      this.replaceTargetVariables(target, options);\n\n      // Apply Time-related functions (timeShift(), etc)\n      let timeFunctions = bindFunctionDefs(target.functions, 'Time');\n      if (timeFunctions.length) {\n        const [time_from, time_to] = utils.sequence(timeFunctions)([timeFrom, timeTo]);\n        timeFrom = time_from;\n        timeTo = time_to;\n      }\n      let timeRange = [timeFrom, timeTo];\n\n      let useTrends = this.isUseTrends(timeRange);\n\n      // Metrics or Text query mode\n      if (!target.mode || target.mode === c.MODE_METRICS || target.mode === c.MODE_TEXT) {\n        // Don't request undefined targets\n        if (!target.group || !target.host || !target.item) {\n          return [];\n        }\n\n        if (!target.mode || target.mode === c.MODE_METRICS) {\n          return this.queryNumericData(target, timeRange, useTrends, options);\n        } else if (target.mode === c.MODE_TEXT) {\n          return this.queryTextData(target, timeRange);\n        }\n      } else if (target.mode === c.MODE_ITEMID) {\n        // Item ID mode\n        if (!target.itemids) {\n          return [];\n        }\n        return this.queryItemIdData(target, timeRange, useTrends, options);\n      } else if (target.mode === c.MODE_ITSERVICE) {\n        // IT services mode\n        return this.queryITServiceData(target, timeRange, options);\n      } else if (target.mode === c.MODE_TRIGGERS) {\n        // Triggers mode\n        return this.queryTriggersData(target, timeRange);\n      } else {\n        return [];\n      }\n    });\n\n    // Data for panel (all targets)\n    return Promise.all(_.flatten(promises))\n      .then(_.flatten)\n      .then(data => {\n        return { data: data };\n      });\n  }\n\n  /**\n   * Query target data for Metrics mode\n   */\n  queryNumericData(target, timeRange, useTrends, options) {\n    let queryStart, queryEnd;\n    let getItemOptions = {\n      itemtype: 'num'\n    };\n    return this.zabbix.getItemsFromTarget(target, getItemOptions)\n    .then(items => {\n      queryStart = new Date().getTime();\n      return this.queryNumericDataForItems(items, target, timeRange, useTrends, options);\n    }).then(result => {\n      queryEnd = new Date().getTime();\n      if (this.enableDebugLog) {\n        console.debug(`Datasource::Performance Query Time (${this.name}): ${queryEnd - queryStart}`);\n      }\n      return result;\n    });\n  }\n\n  /**\n   * Query history for numeric items\n   */\n  queryNumericDataForItems(items, target, timeRange, useTrends, options) {\n    let getHistoryPromise;\n    options.valueType = this.getTrendValueType(target);\n    options.consolidateBy = getConsolidateBy(target) || options.valueType;\n\n    if (useTrends) {\n      getHistoryPromise = this.zabbix.getTrends(items, timeRange, options);\n    } else {\n      getHistoryPromise = this.zabbix.getHistoryTS(items, timeRange, options);\n    }\n\n    return getHistoryPromise\n    .then(timeseries => this.applyDataProcessingFunctions(timeseries, target))\n    .then(timeseries => downsampleSeries(timeseries, options));\n  }\n\n  getTrendValueType(target) {\n    // Find trendValue() function and get specified trend value\n    var trendFunctions = _.map(metricFunctions.getCategories()['Trends'], 'name');\n    var trendValueFunc = _.find(target.functions, func => {\n      return _.includes(trendFunctions, func.def.name);\n    });\n    return trendValueFunc ? trendValueFunc.params[0] : \"avg\";\n  }\n\n  applyDataProcessingFunctions(timeseries_data, target) {\n    let transformFunctions   = bindFunctionDefs(target.functions, 'Transform');\n    let aggregationFunctions = bindFunctionDefs(target.functions, 'Aggregate');\n    let filterFunctions      = bindFunctionDefs(target.functions, 'Filter');\n    let aliasFunctions       = bindFunctionDefs(target.functions, 'Alias');\n\n    // Apply transformation functions\n    timeseries_data = _.cloneDeep(_.map(timeseries_data, timeseries => {\n      timeseries.datapoints = utils.sequence(transformFunctions)(timeseries.datapoints);\n      return timeseries;\n    }));\n\n    // Apply filter functions\n    if (filterFunctions.length) {\n      timeseries_data = utils.sequence(filterFunctions)(timeseries_data);\n    }\n\n    // Apply aggregations\n    if (aggregationFunctions.length) {\n      let dp = _.map(timeseries_data, 'datapoints');\n      dp = utils.sequence(aggregationFunctions)(dp);\n\n      let aggFuncNames = _.map(metricFunctions.getCategories()['Aggregate'], 'name');\n      let lastAgg = _.findLast(target.functions, func => {\n        return _.includes(aggFuncNames, func.def.name);\n      });\n\n      timeseries_data = [{\n        target: lastAgg.text,\n        datapoints: dp\n      }];\n    }\n\n    // Apply alias functions\n    _.forEach(timeseries_data, utils.sequence(aliasFunctions));\n\n    // Apply Time-related functions (timeShift(), etc)\n    // Find timeShift() function and get specified trend value\n    this.applyTimeShiftFunction(timeseries_data, target);\n\n    return timeseries_data;\n  }\n\n  applyTimeShiftFunction(timeseries_data, target) {\n    // Find timeShift() function and get specified interval\n    let timeShiftFunc = _.find(target.functions, (func) => {\n      return func.def.name === 'timeShift';\n    });\n    if (timeShiftFunc) {\n      let shift = timeShiftFunc.params[0];\n      _.forEach(timeseries_data, (series) => {\n        series.datapoints = dataProcessor.unShiftTimeSeries(shift, series.datapoints);\n      });\n    }\n  }\n\n  /**\n   * Query target data for Text mode\n   */\n  queryTextData(target, timeRange) {\n    let options = {\n      itemtype: 'text'\n    };\n    return this.zabbix.getItemsFromTarget(target, options)\n    .then(items => {\n      return this.zabbix.getHistoryText(items, timeRange, target);\n    });\n  }\n\n  /**\n   * Query target data for Item ID mode\n   */\n  queryItemIdData(target, timeRange, useTrends, options) {\n    let itemids = target.itemids;\n    itemids = this.templateSrv.replace(itemids, options.scopedVars, zabbixItemIdsTemplateFormat);\n    itemids = _.map(itemids.split(','), itemid => itemid.trim());\n\n    if (!itemids) {\n      return [];\n    }\n\n    return this.zabbix.getItemsByIDs(itemids)\n    .then(items => {\n      return this.queryNumericDataForItems(items, target, timeRange, useTrends, options);\n    });\n  }\n\n  /**\n   * Query target data for IT Services mode\n   */\n  queryITServiceData(target, timeRange, options) {\n    // Don't show undefined and hidden targets\n    if (target.hide || (!target.itservice && !target.itServiceFilter) || !target.slaProperty) {\n      return [];\n    }\n\n    let itServiceFilter;\n    options.isOldVersion = target.itservice && !target.itServiceFilter;\n\n    if (options.isOldVersion) {\n      // Backward compatibility\n      itServiceFilter = '/.*/';\n    } else {\n      itServiceFilter = this.replaceTemplateVars(target.itServiceFilter, options.scopedVars);\n    }\n\n    return this.zabbix.getITServices(itServiceFilter)\n    .then(itservices => {\n      return this.zabbix.getSLA(itservices, timeRange, target, options);\n    });\n  }\n\n  queryTriggersData(target, timeRange) {\n    let [timeFrom, timeTo] = timeRange;\n    return this.zabbix.getHostsFromTarget(target)\n    .then(results => {\n      let [hosts, apps] = results;\n      if (hosts.length) {\n        let hostids = _.map(hosts, 'hostid');\n        let appids = _.map(apps, 'applicationid');\n        let options = {\n          minSeverity: target.triggers.minSeverity,\n          acknowledged: target.triggers.acknowledged,\n          count: target.triggers.count,\n          timeFrom: timeFrom,\n          timeTo: timeTo\n        };\n        const groupFilter = target.group.filter;\n        return Promise.all([\n          this.zabbix.getHostAlerts(hostids, appids, options),\n          this.zabbix.getGroups(groupFilter)\n        ])\n        .then(([triggers, groups]) => {\n          return responseHandler.handleTriggersResponse(triggers, groups, timeRange);\n        });\n      } else {\n        return Promise.resolve([]);\n      }\n    });\n  }\n\n  /**\n   * Test connection to Zabbix API and external history DB.\n   */\n  testDatasource() {\n    return this.zabbix.testDataSource()\n    .then(result => {\n      const { zabbixVersion, dbConnectorStatus } = result;\n      let message = `Zabbix API version: ${zabbixVersion}`;\n      if (dbConnectorStatus) {\n        message += `, DB connector type: ${dbConnectorStatus.dsType}`;\n      }\n      return {\n        status: \"success\",\n        title: \"Success\",\n        message: message\n      };\n    })\n    .catch(error => {\n      if (error instanceof ZabbixAPIError) {\n        return {\n          status: \"error\",\n          title: error.message,\n          message: error.message\n        };\n      } else if (error.data && error.data.message) {\n        return {\n          status: \"error\",\n          title: \"Connection failed\",\n          message: \"Connection failed: \" + error.data.message\n        };\n      } else if (typeof(error) === 'string') {\n        return {\n          status: \"error\",\n          title: \"Connection failed\",\n          message: \"Connection failed: \" + error\n        };\n      } else {\n        console.log(error);\n        return {\n          status: \"error\",\n          title: \"Connection failed\",\n          message: \"Could not connect to given url\"\n        };\n      }\n    });\n  }\n\n  /**\n   * Get Zabbix version\n   */\n  getVersion() {\n    return this.zabbix.getVersion()\n    .then(version => {\n      const zabbixVersion = utils.parseVersion(version);\n      if (!zabbixVersion) {\n        return null;\n      }\n      return zabbixVersion.major;\n    });\n  }\n\n  ////////////////\n  // Templating //\n  ////////////////\n\n  /**\n   * Find metrics from templated request.\n   *\n   * @param  {string} query Query from Templating\n   * @return {string}       Metric name - group, host, app or item or list\n   *                        of metrics in \"{metric1,metcic2,...,metricN}\" format.\n   */\n  metricFindQuery(query) {\n    let result;\n    let parts = [];\n\n    // Split query. Query structure: group.host.app.item\n    _.each(utils.splitTemplateQuery(query), part => {\n      part = this.replaceTemplateVars(part, {});\n\n      // Replace wildcard to regex\n      if (part === '*') {\n        part = '/.*/';\n      }\n      parts.push(part);\n    });\n    let template = _.zipObject(['group', 'host', 'app', 'item'], parts);\n\n    // Get items\n    if (parts.length === 4) {\n      // Search for all items, even it's not belong to any application\n      if (template.app === '/.*/') {\n        template.app = '';\n      }\n      result = this.zabbix.getItems(template.group, template.host, template.app, template.item);\n    } else if (parts.length === 3) {\n      // Get applications\n      result = this.zabbix.getApps(template.group, template.host, template.app);\n    } else if (parts.length === 2) {\n      // Get hosts\n      result = this.zabbix.getHosts(template.group, template.host);\n    } else if (parts.length === 1) {\n      // Get groups\n      result = this.zabbix.getGroups(template.group);\n    } else {\n      result = Promise.resolve([]);\n    }\n\n    return result.then(metrics => {\n      return _.map(metrics, formatMetric);\n    });\n  }\n\n  /////////////////\n  // Annotations //\n  /////////////////\n\n  annotationQuery(options) {\n    const timeRange = options.range || options.rangeRaw;\n    const timeFrom = Math.ceil(dateMath.parse(timeRange.from) / 1000);\n    const timeTo = Math.ceil(dateMath.parse(timeRange.to) / 1000);\n    var annotation = options.annotation;\n    var showOkEvents = annotation.showOkEvents ? c.SHOW_ALL_EVENTS : c.SHOW_OK_EVENTS;\n\n    // Show all triggers\n    let triggersOptions = {\n      showTriggers: c.SHOW_ALL_TRIGGERS,\n      hideHostsInMaintenance: false\n    };\n\n    var getTriggers = this.zabbix.getTriggers(this.replaceTemplateVars(annotation.group, {}),\n                                              this.replaceTemplateVars(annotation.host, {}),\n                                              this.replaceTemplateVars(annotation.application, {}),\n                                              triggersOptions);\n\n    return getTriggers.then(triggers => {\n\n      // Filter triggers by description\n      let triggerName = this.replaceTemplateVars(annotation.trigger, {});\n      if (utils.isRegex(triggerName)) {\n        triggers = _.filter(triggers, trigger => {\n          return utils.buildRegex(triggerName).test(trigger.description);\n        });\n      } else if (triggerName) {\n        triggers = _.filter(triggers, trigger => {\n          return trigger.description === triggerName;\n        });\n      }\n\n      // Remove events below the chose severity\n      triggers = _.filter(triggers, trigger => {\n        return Number(trigger.priority) >= Number(annotation.minseverity);\n      });\n\n      var objectids = _.map(triggers, 'triggerid');\n      return this.zabbix\n        .getEvents(objectids, timeFrom, timeTo, showOkEvents)\n        .then(events => {\n          var indexedTriggers = _.keyBy(triggers, 'triggerid');\n\n          // Hide acknowledged events if option enabled\n          if (annotation.hideAcknowledged) {\n            events = _.filter(events, event => {\n              return !event.acknowledges.length;\n            });\n          }\n\n          return _.map(events, event => {\n            let tags;\n            if (annotation.showHostname) {\n              tags = _.map(event.hosts, 'name');\n            }\n\n            // Show event type (OK or Problem)\n            let title = Number(event.value) ? 'Problem' : 'OK';\n\n            let formatted_acknowledges = utils.formatAcknowledges(event.acknowledges);\n            return {\n              annotation: annotation,\n              time: event.clock * 1000,\n              title: title,\n              tags: tags,\n              text: indexedTriggers[event.objectid].description + formatted_acknowledges\n            };\n          });\n        });\n    });\n  }\n\n  /**\n   * Get triggers and its details for panel's targets\n   * Returns alert state ('ok' if no fired triggers, or 'alerting' if at least 1 trigger is fired)\n   * or empty object if no related triggers are finded.\n   */\n  alertQuery(options) {\n    let enabled_targets = filterEnabledTargets(options.targets);\n    let getPanelItems = _.map(enabled_targets, t => {\n      let target = _.cloneDeep(t);\n      target = migrations.migrate(target);\n      this.replaceTargetVariables(target, options);\n      return this.zabbix.getItemsFromTarget(target, {itemtype: 'num'});\n    });\n\n    return Promise.all(getPanelItems)\n    .then(results => {\n      let items = _.flatten(results);\n      let itemids = _.map(items, 'itemid');\n\n      if (itemids.length === 0) {\n        return [];\n      }\n      return this.zabbix.getAlerts(itemids);\n    })\n    .then(triggers => {\n      triggers = _.filter(triggers, trigger => {\n        return trigger.priority >= this.alertingMinSeverity;\n      });\n\n      if (!triggers || triggers.length === 0) {\n        return {};\n      }\n\n      let state = 'ok';\n\n      let firedTriggers = _.filter(triggers, {value: '1'});\n      if (firedTriggers.length) {\n        state = 'alerting';\n      }\n\n      let thresholds = _.map(triggers, trigger => {\n        return getTriggerThreshold(trigger.expression);\n      });\n\n      return {\n        panelId: options.panelId,\n        state: state,\n        thresholds: thresholds\n      };\n    });\n  }\n\n  // Replace template variables\n  replaceTargetVariables(target, options) {\n    let parts = ['group', 'host', 'application', 'item'];\n    _.forEach(parts, p => {\n      if (target[p] && target[p].filter) {\n        target[p].filter = this.replaceTemplateVars(target[p].filter, options.scopedVars);\n      }\n    });\n    target.textFilter = this.replaceTemplateVars(target.textFilter, options.scopedVars);\n\n    _.forEach(target.functions, func => {\n      func.params = _.map(func.params, param => {\n        if (typeof param === 'number') {\n          return +this.templateSrv.replace(param.toString(), options.scopedVars);\n        } else {\n          return this.templateSrv.replace(param, options.scopedVars);\n        }\n      });\n    });\n  }\n\n  isUseTrends(timeRange) {\n    let [timeFrom, timeTo] = timeRange;\n    let useTrendsFrom = Math.ceil(dateMath.parse('now-' + this.trendsFrom) / 1000);\n    let useTrendsRange = Math.ceil(utils.parseInterval(this.trendsRange) / 1000);\n    let useTrends = this.trends && (\n      (timeFrom < useTrendsFrom) ||\n      (timeTo - timeFrom > useTrendsRange)\n    );\n    return useTrends;\n  }\n}\n\nfunction bindFunctionDefs(functionDefs, category) {\n  var aggregationFunctions = _.map(metricFunctions.getCategories()[category], 'name');\n  var aggFuncDefs = _.filter(functionDefs, function(func) {\n    return _.includes(aggregationFunctions, func.def.name);\n  });\n\n  return _.map(aggFuncDefs, function(func) {\n    var funcInstance = metricFunctions.createFuncInstance(func.def, func.params);\n    return funcInstance.bindFunction(dataProcessor.metricFunctions);\n  });\n}\n\nfunction getConsolidateBy(target) {\n  let consolidateBy;\n  let funcDef = _.find(target.functions, func => {\n    return func.def.name === 'consolidateBy';\n  });\n  if (funcDef && funcDef.params && funcDef.params.length) {\n    consolidateBy = funcDef.params[0];\n  }\n  return consolidateBy;\n}\n\nfunction downsampleSeries(timeseries_data, options) {\n  let defaultAgg = dataProcessor.aggregationFunctions['avg'];\n  let consolidateByFunc = dataProcessor.aggregationFunctions[options.consolidateBy] || defaultAgg;\n  return _.map(timeseries_data, timeseries => {\n    if (timeseries.datapoints.length > options.maxDataPoints) {\n      timeseries.datapoints = dataProcessor\n        .groupBy(options.interval, consolidateByFunc, timeseries.datapoints);\n    }\n    return timeseries;\n  });\n}\n\nfunction formatMetric(metricObj) {\n  return {\n    text: metricObj.name,\n    expandable: false\n  };\n}\n\n/**\n * Custom formatter for template variables.\n * Default Grafana \"regex\" formatter returns\n * value1|value2\n * This formatter returns\n * (value1|value2)\n * This format needed for using in complex regex with\n * template variables, for example\n * /CPU $cpu_item.*time/ where $cpu_item is system,user,iowait\n */\nexport function zabbixTemplateFormat(value) {\n  if (typeof value === 'string') {\n    return utils.escapeRegex(value);\n  }\n\n  var escapedValues = _.map(value, utils.escapeRegex);\n  return '(' + escapedValues.join('|') + ')';\n}\n\nfunction zabbixItemIdsTemplateFormat(value) {\n  if (typeof value === 'string') {\n    return value;\n  }\n  return value.join(',');\n}\n\n/**\n * If template variables are used in request, replace it using regex format\n * and wrap with '/' for proper multi-value work. Example:\n * $variable selected as a, b, c\n * We use filter $variable\n * $variable    -> a|b|c    -> /a|b|c/\n * /$variable/  -> /a|b|c/  -> /a|b|c/\n */\nfunction replaceTemplateVars(templateSrv, target, scopedVars) {\n  var replacedTarget = templateSrv.replace(target, scopedVars, zabbixTemplateFormat);\n  if (target !== replacedTarget && !utils.isRegex(replacedTarget)) {\n    replacedTarget = '/^' + replacedTarget + '$/';\n  }\n  return replacedTarget;\n}\n\nfunction filterEnabledTargets(targets) {\n  return _.filter(targets, target => {\n    return !(target.hide || !target.group || !target.host || !target.item);\n  });\n}\n\nfunction getTriggerThreshold(expression) {\n  let thresholdPattern = /.*[<>=]{1,2}([\\d\\.]+)/;\n  let finded_thresholds = expression.match(thresholdPattern);\n  if (finded_thresholds && finded_thresholds.length >= 2) {\n    let threshold = finded_thresholds[1];\n    threshold = Number(threshold);\n    return threshold;\n  } else {\n    return null;\n  }\n}\n\n// Fix for backward compatibility with lodash 2.4\nif (!_.includes) {_.includes = _.contains;}\nif (!_.keyBy) {_.keyBy = _.indexBy;}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__39__;","import _ from 'lodash';\nimport * as utils from './utils';\nimport ts from './timeseries';\n\nlet downsampleSeries = ts.downsample;\nlet groupBy = ts.groupBy_perf;\nlet groupBy_exported = (interval, groupFunc, datapoints) => groupBy(datapoints, interval, groupFunc);\nlet sumSeries = ts.sumSeries;\nlet delta = ts.delta;\nlet rate = ts.rate;\nlet scale = (factor, datapoints) => ts.scale_perf(datapoints, factor);\nlet offset = (delta, datapoints) => ts.offset(datapoints, delta);\nlet simpleMovingAverage = (n, datapoints) => ts.simpleMovingAverage(datapoints, n);\nlet expMovingAverage = (a, datapoints) => ts.expMovingAverage(datapoints, a);\n\nlet SUM = ts.SUM;\nlet COUNT = ts.COUNT;\nlet AVERAGE = ts.AVERAGE;\nlet MIN = ts.MIN;\nlet MAX = ts.MAX;\nlet MEDIAN = ts.MEDIAN;\nlet PERCENTILE = ts.PERCENTILE;\n\nfunction limit(order, n, orderByFunc, timeseries) {\n  let orderByCallback = aggregationFunctions[orderByFunc];\n  let sortByIteratee = (ts) => {\n    let values = _.map(ts.datapoints, (point) => {\n      return point[0];\n    });\n    return orderByCallback(values);\n  };\n  let sortedTimeseries = _.sortBy(timeseries, sortByIteratee);\n  if (order === 'bottom') {\n    return sortedTimeseries.slice(0, n);\n  } else {\n    return sortedTimeseries.slice(-n);\n  }\n}\n\nfunction removeAboveValue(n, datapoints) {\n  return _.map(datapoints, point => {\n    return [\n      (point[0] > n) ? null : point[0],\n      point[1]\n    ];\n  });\n}\n\nfunction removeBelowValue(n, datapoints) {\n  return _.map(datapoints, point => {\n    return [\n      (point[0] < n) ? null : point[0],\n      point[1]\n    ];\n  });\n}\n\nfunction transformNull(n, datapoints) {\n  return _.map(datapoints, point => {\n    return [\n      (point[0] !== null) ? point[0] : n,\n      point[1]\n    ];\n  });\n}\n\nfunction sortSeries(direction, timeseries) {\n  return _.orderBy(timeseries, [function (ts) {\n    return ts.target.toLowerCase();\n  }], direction);\n}\n\nfunction setAlias(alias, timeseries) {\n  timeseries.target = alias;\n  return timeseries;\n}\n\nfunction replaceAlias(regexp, newAlias, timeseries) {\n  let pattern;\n  if (utils.isRegex(regexp)) {\n    pattern = utils.buildRegex(regexp);\n  } else {\n    pattern = regexp;\n  }\n\n  let alias = timeseries.target.replace(pattern, newAlias);\n  timeseries.target = alias;\n  return timeseries;\n}\n\nfunction setAliasByRegex(alias, timeseries) {\n  timeseries.target = extractText(timeseries.target, alias);\n  return timeseries;\n}\n\nfunction extractText(str, pattern) {\n  var extractPattern = new RegExp(pattern);\n  var extractedValue = extractPattern.exec(str);\n  extractedValue = extractedValue[0];\n  return extractedValue;\n}\n\nfunction groupByWrapper(interval, groupFunc, datapoints) {\n  var groupByCallback = aggregationFunctions[groupFunc];\n  return groupBy(datapoints, interval, groupByCallback);\n}\n\nfunction aggregateByWrapper(interval, aggregateFunc, datapoints) {\n  // Flatten all points in frame and then just use groupBy()\n  const flattenedPoints = ts.flattenDatapoints(datapoints);\n  // groupBy_perf works with sorted series only\n  const sortedPoints = ts.sortByTime(flattenedPoints);\n  let groupByCallback = aggregationFunctions[aggregateFunc];\n  return groupBy(sortedPoints, interval, groupByCallback);\n}\n\nfunction aggregateWrapper(groupByCallback, interval, datapoints) {\n  var flattenedPoints = ts.flattenDatapoints(datapoints);\n  // groupBy_perf works with sorted series only\n  const sortedPoints = ts.sortByTime(flattenedPoints);\n  return groupBy(sortedPoints, interval, groupByCallback);\n}\n\nfunction percentile(interval, n, datapoints) {\n  var flattenedPoints = ts.flattenDatapoints(datapoints);\n  var groupByCallback = _.partial(PERCENTILE, n);\n  return groupBy(flattenedPoints, interval, groupByCallback);\n}\n\nfunction timeShift(interval, range) {\n  let shift = utils.parseTimeShiftInterval(interval) / 1000;\n  return _.map(range, time => {\n    return time - shift;\n  });\n}\n\nfunction unShiftTimeSeries(interval, datapoints) {\n  let unshift = utils.parseTimeShiftInterval(interval);\n  return _.map(datapoints, dp => {\n    return [\n      dp[0],\n      dp[1] + unshift\n    ];\n  });\n}\n\nlet metricFunctions = {\n  groupBy: groupByWrapper,\n  scale: scale,\n  offset: offset,\n  delta: delta,\n  rate: rate,\n  movingAverage: simpleMovingAverage,\n  exponentialMovingAverage: expMovingAverage,\n  transformNull: transformNull,\n  aggregateBy: aggregateByWrapper,\n  // Predefined aggs\n  percentile: percentile,\n  average: _.partial(aggregateWrapper, AVERAGE),\n  min: _.partial(aggregateWrapper, MIN),\n  max: _.partial(aggregateWrapper, MAX),\n  median: _.partial(aggregateWrapper, MEDIAN),\n  sum: _.partial(aggregateWrapper, SUM),\n  count: _.partial(aggregateWrapper, COUNT),\n  sumSeries: sumSeries,\n  removeAboveValue: removeAboveValue,\n  removeBelowValue: removeBelowValue,\n  top: _.partial(limit, 'top'),\n  bottom: _.partial(limit, 'bottom'),\n  sortSeries: sortSeries,\n  timeShift: timeShift,\n  setAlias: setAlias,\n  setAliasByRegex: setAliasByRegex,\n  replaceAlias: replaceAlias\n};\n\nlet aggregationFunctions = {\n  avg: AVERAGE,\n  min: MIN,\n  max: MAX,\n  median: MEDIAN,\n  sum: SUM,\n  count: COUNT\n};\n\nexport default {\n  downsampleSeries: downsampleSeries,\n  groupBy: groupBy_exported,\n  AVERAGE: AVERAGE,\n  MIN: MIN,\n  MAX: MAX,\n  MEDIAN: MEDIAN,\n  SUM: SUM,\n  COUNT: COUNT,\n  unShiftTimeSeries: unShiftTimeSeries,\n\n  get aggregationFunctions() {\n    return aggregationFunctions;\n  },\n\n  get metricFunctions() {\n    return metricFunctions;\n  }\n};\n","/**\n * timeseries.js\n *\n * This module contains functions for working with time series.\n *\n * datapoints - array of points where point is [value, timestamp]. In almost all cases (if other wasn't\n * explicitly said) we assume datapoints are sorted by timestamp. Timestamp is the number of milliseconds\n * since 1 January 1970 00:00:00 UTC.\n *\n */\n\nimport _ from 'lodash';\nimport * as utils from './utils';\n\nconst POINT_VALUE = 0;\nconst POINT_TIMESTAMP = 1;\n\n/**\n * Downsample time series by using given function (avg, min, max).\n */\nfunction downsample(datapoints, time_to, ms_interval, func) {\n  var downsampledSeries = [];\n  var timeWindow = {\n    from: time_to * 1000 - ms_interval,\n    to: time_to * 1000\n  };\n\n  var points_sum = 0;\n  var points_num = 0;\n  var value_avg = 0;\n  var frame = [];\n\n  for (var i = datapoints.length - 1; i >= 0; i -= 1) {\n    if (timeWindow.from < datapoints[i][1] && datapoints[i][1] <= timeWindow.to) {\n      points_sum += datapoints[i][0];\n      points_num++;\n      frame.push(datapoints[i][0]);\n    }\n    else {\n      value_avg = points_num ? points_sum / points_num : 0;\n\n      if (func === \"max\") {\n        downsampledSeries.push([_.max(frame), timeWindow.to]);\n      }\n      else if (func === \"min\") {\n        downsampledSeries.push([_.min(frame), timeWindow.to]);\n      }\n\n      // avg by default\n      else {\n        downsampledSeries.push([value_avg, timeWindow.to]);\n      }\n\n      // Shift time window\n      timeWindow.to = timeWindow.from;\n      timeWindow.from -= ms_interval;\n\n      points_sum = 0;\n      points_num = 0;\n      frame = [];\n\n      // Process point again\n      i++;\n    }\n  }\n  return downsampledSeries.reverse();\n}\n\n/**\n * Group points by given time interval\n * datapoints: [[<value>, <unixtime>], ...]\n */\nfunction groupBy(datapoints, interval, groupByCallback) {\n  var ms_interval = utils.parseInterval(interval);\n\n  // Calculate frame timestamps\n  var frames = _.groupBy(datapoints, function (point) {\n    // Calculate time for group of points\n    return Math.floor(point[1] / ms_interval) * ms_interval;\n  });\n\n  // frame: { '<unixtime>': [[<value>, <unixtime>], ...] }\n  // return [{ '<unixtime>': <value> }, { '<unixtime>': <value> }, ...]\n  var grouped = _.mapValues(frames, function (frame) {\n    var points = _.map(frame, function (point) {\n      return point[0];\n    });\n    return groupByCallback(points);\n  });\n\n  // Convert points to Grafana format\n  return sortByTime(_.map(grouped, function (value, timestamp) {\n    return [Number(value), Number(timestamp)];\n  }));\n}\n\nfunction groupBy_perf(datapoints, interval, groupByCallback) {\n  if (datapoints.length === 0) {\n    return [];\n  }\n\n  let ms_interval = utils.parseInterval(interval);\n  let grouped_series = [];\n  let frame_values = [];\n  let frame_value;\n  let frame_ts = datapoints.length ? getPointTimeFrame(datapoints[0][POINT_TIMESTAMP], ms_interval) : 0;\n  let point_frame_ts = frame_ts;\n  let point;\n\n  for (let i=0; i < datapoints.length; i++) {\n    point = datapoints[i];\n    point_frame_ts = getPointTimeFrame(point[POINT_TIMESTAMP], ms_interval);\n    if (point_frame_ts === frame_ts) {\n      frame_values.push(point[POINT_VALUE]);\n    } else if (point_frame_ts > frame_ts) {\n      frame_value = groupByCallback(frame_values);\n      grouped_series.push([frame_value, frame_ts]);\n\n      // Move frame window to next non-empty interval and fill empty by null\n      frame_ts += ms_interval;\n      while (frame_ts < point_frame_ts) {\n        grouped_series.push([null, frame_ts]);\n        frame_ts += ms_interval;\n      }\n      frame_values = [point[POINT_VALUE]];\n    }\n  }\n\n  frame_value = groupByCallback(frame_values);\n  grouped_series.push([frame_value, frame_ts]);\n\n  return grouped_series;\n}\n\n/**\n * Summarize set of time series into one.\n * @param {datapoints[]} timeseries array of time series\n */\nfunction sumSeries(timeseries) {\n\n  // Calculate new points for interpolation\n  var new_timestamps = _.uniq(_.map(_.flatten(timeseries, true), function (point) {\n    return point[1];\n  }));\n  new_timestamps = _.sortBy(new_timestamps);\n\n  var interpolated_timeseries = _.map(timeseries, function (series) {\n    series = fillZeroes(series, new_timestamps);\n    var timestamps = _.map(series, function (point) {\n      return point[1];\n    });\n    var new_points = _.map(_.difference(new_timestamps, timestamps), function (timestamp) {\n      return [null, timestamp];\n    });\n    var new_series = series.concat(new_points);\n    return sortByTime(new_series);\n  });\n\n  _.each(interpolated_timeseries, interpolateSeries);\n\n  var new_timeseries = [];\n  var sum;\n  for (var i = new_timestamps.length - 1; i >= 0; i--) {\n    sum = 0;\n    for (var j = interpolated_timeseries.length - 1; j >= 0; j--) {\n      sum += interpolated_timeseries[j][i][0];\n    }\n    new_timeseries.push([sum, new_timestamps[i]]);\n  }\n\n  return sortByTime(new_timeseries);\n}\n\nfunction scale(datapoints, factor) {\n  return _.map(datapoints, point => {\n    return [\n      point[0] * factor,\n      point[1]\n    ];\n  });\n}\n\nfunction scale_perf(datapoints, factor) {\n  for (let i = 0; i < datapoints.length; i++) {\n    datapoints[i] = [\n      datapoints[i][POINT_VALUE] * factor,\n      datapoints[i][POINT_TIMESTAMP]\n    ];\n  }\n\n  return datapoints;\n}\n\nfunction offset(datapoints, delta) {\n  for (let i = 0; i < datapoints.length; i++) {\n    datapoints[i] = [\n      datapoints[i][POINT_VALUE] + delta,\n      datapoints[i][POINT_TIMESTAMP]\n    ];\n  }\n\n  return datapoints;\n}\n\n/**\n * Simple delta. Calculate value delta between points.\n * @param {*} datapoints\n */\nfunction delta(datapoints) {\n  let newSeries = [];\n  let deltaValue;\n  for (var i = 1; i < datapoints.length; i++) {\n    deltaValue = datapoints[i][0] - datapoints[i - 1][0];\n    newSeries.push([deltaValue, datapoints[i][1]]);\n  }\n  return newSeries;\n}\n\n/**\n * Calculates rate per second. Resistant to counter reset.\n * @param {*} datapoints\n */\nfunction rate(datapoints) {\n  let newSeries = [];\n  let point, point_prev;\n  let valueDelta = 0;\n  let timeDelta = 0;\n  for (let i = 1; i < datapoints.length; i++) {\n    point = datapoints[i];\n    point_prev = datapoints[i - 1];\n\n    // Convert ms to seconds\n    timeDelta = (point[POINT_TIMESTAMP] - point_prev[POINT_TIMESTAMP]) / 1000;\n\n    // Handle counter reset - use previous value\n    if (point[POINT_VALUE] >= point_prev[POINT_VALUE]) {\n      valueDelta = (point[POINT_VALUE] - point_prev[POINT_VALUE]) / timeDelta;\n    }\n\n    newSeries.push([valueDelta, point[POINT_TIMESTAMP]]);\n  }\n  return newSeries;\n}\n\nfunction simpleMovingAverage(datapoints, n) {\n  let sma = [];\n  let w_sum;\n  let w_avg = null;\n  let w_count = 0;\n\n  // Initial window\n  for (let j = n; j > 0; j--) {\n    if (datapoints[n - j][POINT_VALUE] !== null) {\n      w_avg += datapoints[n - j][POINT_VALUE];\n      w_count++;\n    }\n  }\n  if (w_count > 0) {\n    w_avg = w_avg / w_count;\n  } else {\n    w_avg = null;\n  }\n  sma.push([w_avg, datapoints[n - 1][POINT_TIMESTAMP]]);\n\n  for (let i = n; i < datapoints.length; i++) {\n    // Insert next value\n    if (datapoints[i][POINT_VALUE] !== null) {\n      w_sum = w_avg * w_count;\n      w_avg = (w_sum + datapoints[i][POINT_VALUE]) / (w_count + 1);\n      w_count++;\n    }\n    // Remove left side point\n    if (datapoints[i - n][POINT_VALUE] !== null) {\n      w_sum = w_avg * w_count;\n      if (w_count > 1) {\n        w_avg = (w_sum - datapoints[i - n][POINT_VALUE]) / (w_count - 1);\n        w_count--;\n      } else {\n        w_avg = null;\n        w_count = 0;\n      }\n    }\n    sma.push([w_avg, datapoints[i][POINT_TIMESTAMP]]);\n  }\n  return sma;\n}\n\nfunction expMovingAverage(datapoints, n) {\n  let ema = [datapoints[0]];\n  let ema_prev = datapoints[0][POINT_VALUE];\n  let ema_cur;\n  let a;\n\n  if (n > 1) {\n    // Calculate a from window size\n    a = 2 / (n + 1);\n\n    // Initial window, use simple moving average\n    let w_avg = null;\n    let w_count = 0;\n    for (let j = n; j > 0; j--) {\n      if (datapoints[n - j][POINT_VALUE] !== null) {\n        w_avg += datapoints[n - j][POINT_VALUE];\n        w_count++;\n      }\n    }\n    if (w_count > 0) {\n      w_avg = w_avg / w_count;\n      // Actually, we should set timestamp from datapoints[n-1] and start calculation of EMA from n.\n      // But in order to start EMA from first point (not from Nth) we should expand time range and request N additional\n      // points outside left side of range. We can't do that, so this trick is used for pretty view of first N points.\n      // We calculate AVG for first N points, but then start from 2nd point, not from Nth. In general, it means we\n      // assume that previous N values (0-N, 0-(N-1), ..., 0-1) have the same average value as a first N values.\n      ema = [[w_avg, datapoints[0][POINT_TIMESTAMP]]];\n      ema_prev = w_avg;\n      n = 1;\n    }\n  } else {\n    // Use predefined a and start from 1st point (use it as initial EMA value)\n    a = n;\n    n = 1;\n  }\n\n  for (let i = n; i < datapoints.length; i++) {\n    if (datapoints[i][POINT_VALUE] !== null) {\n      ema_cur = a * datapoints[i][POINT_VALUE] + (1 - a) * ema_prev;\n      ema_prev = ema_cur;\n      ema.push([ema_cur, datapoints[i][POINT_TIMESTAMP]]);\n    } else {\n      ema.push([null, datapoints[i][POINT_TIMESTAMP]]);\n    }\n  }\n  return ema;\n}\n\nfunction PERCENTILE(n, values) {\n  var sorted = _.sortBy(values);\n  return sorted[Math.floor(sorted.length * n / 100)];\n}\n\nfunction COUNT(values) {\n  return values.length;\n}\n\nfunction SUM(values) {\n  var sum = null;\n  for (let i = 0; i < values.length; i++) {\n    if (values[i] !== null) {\n      sum += values[i];\n    }\n  }\n  return sum;\n}\n\nfunction AVERAGE(values) {\n  let values_non_null = getNonNullValues(values);\n  if (values_non_null.length === 0) {\n    return null;\n  }\n  return SUM(values_non_null) / values_non_null.length;\n}\n\nfunction getNonNullValues(values) {\n  let values_non_null = [];\n  for (let i = 0; i < values.length; i++) {\n    if (values[i] !== null) {\n      values_non_null.push(values[i]);\n    }\n  }\n  return values_non_null;\n}\n\nfunction MIN(values) {\n  return _.min(values);\n}\n\nfunction MAX(values) {\n  return _.max(values);\n}\n\nfunction MEDIAN(values) {\n  var sorted = _.sortBy(values);\n  return sorted[Math.floor(sorted.length / 2)];\n}\n\n///////////////////////\n// Utility functions //\n///////////////////////\n\n/**\n * For given point calculate corresponding time frame.\n *\n * |__*_|_*__|___*| -> |*___|*___|*___|\n *\n * @param {*} timestamp\n * @param {*} ms_interval\n */\nfunction getPointTimeFrame(timestamp, ms_interval) {\n  return Math.floor(timestamp / ms_interval) * ms_interval;\n}\n\nfunction sortByTime(series) {\n  return _.sortBy(series, function (point) {\n    return point[1];\n  });\n}\n\n/**\n * Fill empty front and end of series by zeroes.\n *\n * |   ***   |    |   ***   |\n * |___   ___| -> |***   ***|\n * @param {*} series\n * @param {*} timestamps\n */\nfunction fillZeroes(series, timestamps) {\n  let prepend = [];\n  let append = [];\n  let new_point;\n  for (let i = 0; i < timestamps.length; i++) {\n    if (timestamps[i] < series[0][POINT_TIMESTAMP]) {\n      new_point = [0, timestamps[i]];\n      prepend.push(new_point);\n    } else if (timestamps[i] > series[series.length - 1][POINT_TIMESTAMP]) {\n      new_point = [0, timestamps[i]];\n      append.push(new_point);\n    }\n  }\n  return _.concat(_.concat(prepend, series), append);\n}\n\n/**\n * Interpolate series with gaps\n */\nfunction interpolateSeries(series) {\n  var left, right;\n\n  // Interpolate series\n  for (var i = series.length - 1; i >= 0; i--) {\n    if (!series[i][0]) {\n      left = findNearestLeft(series, i);\n      right = findNearestRight(series, i);\n      if (!left) {\n        left = right;\n      }\n      if (!right) {\n        right = left;\n      }\n      series[i][0] = linearInterpolation(series[i][1], left, right);\n    }\n  }\n  return series;\n}\n\nfunction linearInterpolation(timestamp, left, right) {\n  if (left[1] === right[1]) {\n    return (left[0] + right[0]) / 2;\n  } else {\n    return (left[0] + (right[0] - left[0]) / (right[1] - left[1]) * (timestamp - left[1]));\n  }\n}\n\nfunction findNearestRight(series, pointIndex) {\n  for (var i = pointIndex; i < series.length; i++) {\n    if (series[i][0] !== null) {\n      return series[i];\n    }\n  }\n  return null;\n}\n\nfunction findNearestLeft(series, pointIndex) {\n  for (var i = pointIndex; i > 0; i--) {\n    if (series[i][0] !== null) {\n      return series[i];\n    }\n  }\n  return null;\n}\n\nfunction flattenDatapoints(datapoints) {\n  const depth = utils.getArrayDepth(datapoints);\n  if (depth <= 2) {\n    // Don't process if datapoints already flattened\n    return datapoints;\n  }\n  return _.flatten(datapoints);\n}\n\n////////////\n// Export //\n////////////\n\nconst exportedFunctions = {\n  downsample,\n  groupBy,\n  groupBy_perf,\n  sumSeries,\n  scale,\n  offset,\n  scale_perf,\n  delta,\n  rate,\n  simpleMovingAverage,\n  expMovingAverage,\n  SUM,\n  COUNT,\n  AVERAGE,\n  MIN,\n  MAX,\n  MEDIAN,\n  PERCENTILE,\n  sortByTime,\n  flattenDatapoints,\n};\n\nexport default exportedFunctions;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__42__;","import _ from 'lodash';\nimport * as utils from '../utils';\nimport responseHandler from '../responseHandler';\nimport { CachingProxy } from './proxy/cachingProxy';\nimport { ZabbixNotImplemented } from './connectors/dbConnector';\nimport { DBConnector } from './connectors/dbConnector';\nimport { ZabbixAPIConnector } from './connectors/zabbix_api/zabbixAPIConnector';\nimport { SQLConnector } from './connectors/sql/sqlConnector';\nimport { InfluxDBConnector } from './connectors/influxdb/influxdbConnector';\n\nconst REQUESTS_TO_PROXYFY = [\n  'getHistory', 'getTrend', 'getGroups', 'getHosts', 'getApps', 'getItems', 'getMacros', 'getItemsByIDs',\n  'getEvents', 'getAlerts', 'getHostAlerts', 'getAcknowledges', 'getITService', 'getSLA', 'getVersion', 'getProxies',\n  'getEventAlerts', 'getExtendedEventData'\n];\n\nconst REQUESTS_TO_CACHE = [\n  'getGroups', 'getHosts', 'getApps', 'getItems', 'getMacros', 'getItemsByIDs', 'getITService', 'getProxies'\n];\n\nconst REQUESTS_TO_BIND = [\n  'getHistory', 'getTrend', 'getMacros', 'getItemsByIDs', 'getEvents', 'getAlerts', 'getHostAlerts',\n  'getAcknowledges', 'getITService', 'getVersion', 'login', 'acknowledgeEvent', 'getProxies', 'getEventAlerts',\n  'getExtendedEventData'\n];\n\nexport class Zabbix {\n  constructor(options, datasourceSrv, backendSrv) {\n    let {\n      url,\n      username,\n      password,\n      basicAuth,\n      withCredentials,\n      zabbixVersion,\n      cacheTTL,\n      enableDirectDBConnection,\n      dbConnectionDatasourceId,\n      dbConnectionDatasourceName,\n      dbConnectionRetentionPolicy,\n    } = options;\n\n    this.enableDirectDBConnection = enableDirectDBConnection;\n\n    // Initialize caching proxy for requests\n    let cacheOptions = {\n      enabled: true,\n      ttl: cacheTTL\n    };\n    this.cachingProxy = new CachingProxy(cacheOptions);\n\n    this.zabbixAPI = new ZabbixAPIConnector(url, username, password, zabbixVersion, basicAuth, withCredentials, backendSrv);\n\n    this.proxyfyRequests();\n    this.cacheRequests();\n    this.bindRequests();\n\n    if (enableDirectDBConnection) {\n      const connectorOptions = { dbConnectionRetentionPolicy };\n      this.initDBConnector(dbConnectionDatasourceId, dbConnectionDatasourceName, datasourceSrv, connectorOptions)\n      .then(() => {\n        this.getHistoryDB = this.cachingProxy.proxyfyWithCache(this.dbConnector.getHistory, 'getHistory', this.dbConnector);\n        this.getTrendsDB = this.cachingProxy.proxyfyWithCache(this.dbConnector.getTrends, 'getTrends', this.dbConnector);\n      });\n    }\n  }\n\n  initDBConnector(datasourceId, datasourceName, datasourceSrv, options) {\n    return DBConnector.loadDatasource(datasourceId, datasourceName, datasourceSrv)\n    .then(ds => {\n      let connectorOptions = { datasourceId, datasourceName };\n      if (ds.type === 'influxdb') {\n        connectorOptions.retentionPolicy = options.dbConnectionRetentionPolicy;\n        this.dbConnector = new InfluxDBConnector(connectorOptions, datasourceSrv);\n      } else {\n        this.dbConnector = new SQLConnector(connectorOptions, datasourceSrv);\n      }\n      return this.dbConnector;\n    });\n  }\n\n  proxyfyRequests() {\n    for (let request of REQUESTS_TO_PROXYFY) {\n      this.zabbixAPI[request] = this.cachingProxy.proxyfy(this.zabbixAPI[request], request, this.zabbixAPI);\n    }\n  }\n\n  cacheRequests() {\n    for (let request of REQUESTS_TO_CACHE) {\n      this.zabbixAPI[request] = this.cachingProxy.cacheRequest(this.zabbixAPI[request], request, this.zabbixAPI);\n    }\n  }\n\n  bindRequests() {\n    for (let request of REQUESTS_TO_BIND) {\n      this[request] = this.zabbixAPI[request].bind(this.zabbixAPI);\n    }\n  }\n\n  /**\n   * Perform test query for Zabbix API and external history DB.\n   * @return {object} test result object:\n   * ```\n    {\n      zabbixVersion,\n      dbConnectorStatus: {\n        dsType,\n        dsName\n      }\n    }\n   ```\n   */\n  testDataSource() {\n    let zabbixVersion;\n    let dbConnectorStatus;\n    return this.getVersion()\n    .then(version => {\n      zabbixVersion = version;\n      return this.login();\n    })\n    .then(() => {\n      if (this.enableDirectDBConnection) {\n        return this.dbConnector.testDataSource();\n      } else {\n        return Promise.resolve();\n      }\n    })\n    .catch(error => {\n      if (error instanceof ZabbixNotImplemented) {\n        return Promise.resolve();\n      }\n      return Promise.reject(error);\n    })\n    .then(testResult => {\n      if (testResult) {\n        dbConnectorStatus = {\n          dsType: this.dbConnector.datasourceTypeName,\n          dsName: this.dbConnector.datasourceName\n        };\n      }\n      return { zabbixVersion, dbConnectorStatus };\n    });\n  }\n\n  getItemsFromTarget(target, options) {\n    let parts = ['group', 'host', 'application', 'item'];\n    let filters = _.map(parts, p => target[p].filter);\n    return this.getItems(...filters, options);\n  }\n\n  getHostsFromTarget(target) {\n    let parts = ['group', 'host', 'application'];\n    let filters = _.map(parts, p => target[p].filter);\n    return Promise.all([\n      this.getHosts(...filters),\n      this.getApps(...filters),\n    ]).then((results) => {\n      let [hosts, apps] = results;\n      if (apps.appFilterEmpty) {\n        apps = [];\n      }\n      return [hosts, apps];\n    });\n  }\n\n  getAllGroups() {\n    return this.zabbixAPI.getGroups();\n  }\n\n  getGroups(groupFilter) {\n    return this.getAllGroups()\n    .then(groups => findByFilter(groups, groupFilter));\n  }\n\n  /**\n   * Get list of host belonging to given groups.\n   */\n  getAllHosts(groupFilter) {\n    return this.getGroups(groupFilter)\n    .then(groups => {\n      let groupids = _.map(groups, 'groupid');\n      return this.zabbixAPI.getHosts(groupids);\n    });\n  }\n\n  getHosts(groupFilter, hostFilter) {\n    return this.getAllHosts(groupFilter)\n    .then(hosts => findByFilter(hosts, hostFilter));\n  }\n\n  /**\n   * Get list of applications belonging to given groups and hosts.\n   */\n  getAllApps(groupFilter, hostFilter) {\n    return this.getHosts(groupFilter, hostFilter)\n    .then(hosts => {\n      let hostids = _.map(hosts, 'hostid');\n      return this.zabbixAPI.getApps(hostids);\n    });\n  }\n\n  getApps(groupFilter, hostFilter, appFilter) {\n    return this.getHosts(groupFilter, hostFilter)\n    .then(hosts => {\n      let hostids = _.map(hosts, 'hostid');\n      if (appFilter) {\n        return this.zabbixAPI.getApps(hostids)\n        .then(apps => filterByQuery(apps, appFilter));\n      } else {\n        return {\n          appFilterEmpty: true,\n          hostids: hostids\n        };\n      }\n    });\n  }\n\n  getAllItems(groupFilter, hostFilter, appFilter, options = {}) {\n    return this.getApps(groupFilter, hostFilter, appFilter)\n    .then(apps => {\n      if (apps.appFilterEmpty) {\n        return this.zabbixAPI.getItems(apps.hostids, undefined, options.itemtype);\n      } else {\n        let appids = _.map(apps, 'applicationid');\n        return this.zabbixAPI.getItems(undefined, appids, options.itemtype);\n      }\n    })\n    .then(items => {\n      if (!options.showDisabledItems) {\n        items = _.filter(items, {'status': '0'});\n      }\n\n      return items;\n    })\n    .then(this.expandUserMacro.bind(this));\n  }\n\n  expandUserMacro(items) {\n    let hostids = getHostIds(items);\n    return this.getMacros(hostids)\n    .then(macros => {\n      _.forEach(items, item => {\n        if (utils.containsMacro(item.name)) {\n          item.name = utils.replaceMacro(item, macros);\n        }\n      });\n      return items;\n    });\n  }\n\n  getItems(groupFilter, hostFilter, appFilter, itemFilter, options = {}) {\n    return this.getAllItems(groupFilter, hostFilter, appFilter, options)\n    .then(items => filterByQuery(items, itemFilter));\n  }\n\n  getITServices(itServiceFilter) {\n    return this.zabbixAPI.getITService()\n    .then(itServices => findByFilter(itServices, itServiceFilter));\n  }\n\n  /**\n   * Build query - convert target filters to array of Zabbix items\n   */\n  getTriggers(groupFilter, hostFilter, appFilter, options, proxyFilter) {\n    let promises = [\n      this.getGroups(groupFilter),\n      this.getHosts(groupFilter, hostFilter),\n      this.getApps(groupFilter, hostFilter, appFilter)\n    ];\n\n    return Promise.all(promises)\n    .then(results => {\n      let [filteredGroups, filteredHosts, filteredApps] = results;\n      let query = {};\n\n      if (appFilter) {\n        query.applicationids = _.flatten(_.map(filteredApps, 'applicationid'));\n      }\n      if (hostFilter) {\n        query.hostids = _.map(filteredHosts, 'hostid');\n      }\n      if (groupFilter) {\n        query.groupids = _.map(filteredGroups, 'groupid');\n      }\n\n      return query;\n    })\n    .then(query => this.zabbixAPI.getTriggers(query.groupids, query.hostids, query.applicationids, options))\n    .then(triggers => this.filterTriggersByProxy(triggers, proxyFilter));\n  }\n\n  filterTriggersByProxy(triggers, proxyFilter) {\n    return this.getFilteredProxies(proxyFilter)\n    .then(proxies => {\n      if (proxyFilter && proxyFilter !== '/.*/' && triggers) {\n        const proxy_ids = proxies.map(proxy => proxy.proxyid);\n        triggers = triggers.filter(trigger => {\n          let filtered = false;\n          for(let i = 0; i < trigger.hosts.length; i++) {\n            const host = trigger.hosts[i];\n            if (proxy_ids.includes(host.proxy_hostid)) {\n              filtered = true;\n            }\n          }\n          return filtered;\n        });\n      }\n      return triggers;\n    });\n  }\n\n  getFilteredProxies(proxyFilter) {\n    return this.zabbixAPI.getProxies()\n    .then(proxies => {\n      proxies.forEach(proxy => proxy.name = proxy.host);\n      return findByFilter(proxies, proxyFilter);\n    });\n  }\n\n  getHistoryTS(items, timeRange, options) {\n    let [timeFrom, timeTo] = timeRange;\n    if (this.enableDirectDBConnection) {\n      return this.getHistoryDB(items, timeFrom, timeTo, options)\n      .then(history => this.dbConnector.handleGrafanaTSResponse(history, items));\n    } else {\n      return this.zabbixAPI.getHistory(items, timeFrom, timeTo)\n      .then(history => responseHandler.handleHistory(history, items));\n    }\n  }\n\n  getTrends(items, timeRange, options) {\n    let [timeFrom, timeTo] = timeRange;\n    if (this.enableDirectDBConnection) {\n      return this.getTrendsDB(items, timeFrom, timeTo, options)\n      .then(history => this.dbConnector.handleGrafanaTSResponse(history, items));\n    } else {\n      let valueType = options.consolidateBy || options.valueType;\n      return this.zabbixAPI.getTrend(items, timeFrom, timeTo)\n      .then(history => responseHandler.handleTrends(history, items, valueType))\n      .then(responseHandler.sortTimeseries); // Sort trend data, issue #202\n    }\n  }\n\n  getHistoryText(items, timeRange, target) {\n    let [timeFrom, timeTo] = timeRange;\n    if (items.length) {\n      return this.zabbixAPI.getHistory(items, timeFrom, timeTo)\n      .then(history => {\n        if (target.resultFormat === 'table') {\n          return responseHandler.handleHistoryAsTable(history, items, target);\n        } else {\n          return responseHandler.handleText(history, items, target);\n        }\n      });\n    } else {\n      return Promise.resolve([]);\n    }\n  }\n\n  getSLA(itservices, timeRange, target, options) {\n    let itServices = itservices;\n    if (options.isOldVersion) {\n      itServices = _.filter(itServices, {'serviceid': target.itservice.serviceid});\n    }\n    let itServiceIds = _.map(itServices, 'serviceid');\n    return this.zabbixAPI.getSLA(itServiceIds, timeRange)\n    .then(slaResponse => {\n      return _.map(itServiceIds, serviceid => {\n        let itservice = _.find(itServices, {'serviceid': serviceid});\n        return responseHandler.handleSLAResponse(itservice, target.slaProperty, slaResponse);\n      });\n    });\n  }\n}\n\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Find group, host, app or item by given name.\n * @param  list list of groups, apps or other\n * @param  name visible name\n * @return      array with finded element or empty array\n */\nfunction findByName(list, name) {\n  var finded = _.find(list, {'name': name});\n  if (finded) {\n    return [finded];\n  } else {\n    return [];\n  }\n}\n\n/**\n * Different hosts can contains applications and items with same name.\n * For this reason use _.filter, which return all elements instead _.find,\n * which return only first finded.\n * @param  {[type]} list list of elements\n * @param  {[type]} name app name\n * @return {[type]}      array with finded element or empty array\n */\nfunction filterByName(list, name) {\n  var finded = _.filter(list, {'name': name});\n  if (finded) {\n    return finded;\n  } else {\n    return [];\n  }\n}\n\nfunction filterByRegex(list, regex) {\n  var filterPattern = utils.buildRegex(regex);\n  return _.filter(list, function (zbx_obj) {\n    return filterPattern.test(zbx_obj.name);\n  });\n}\n\nfunction findByFilter(list, filter) {\n  if (utils.isRegex(filter)) {\n    return filterByRegex(list, filter);\n  } else {\n    return findByName(list, filter);\n  }\n}\n\nfunction filterByQuery(list, filter) {\n  if (utils.isRegex(filter)) {\n    return filterByRegex(list, filter);\n  } else {\n    return filterByName(list, filter);\n  }\n}\n\nfunction getHostIds(items) {\n  let hostIds = _.map(items, item => {\n    return _.map(item.hosts, 'hostid');\n  });\n  return _.uniq(_.flatten(hostIds));\n}\n","/**\n * This module allows to deduplicate function calls with the same params and\n * cache result of function call.\n */\n\nexport class CachingProxy {\n\n  constructor(cacheOptions) {\n    this.cacheEnabled = cacheOptions.enabled;\n    this.ttl          = cacheOptions.ttl || 600000; // 10 minutes by default\n\n    // Internal objects for data storing\n    this.cache = {};\n    this.promises = {};\n  }\n\n  /**\n   * Check that result is present in the cache and is up to date or send request otherwise.\n   */\n  cacheRequest(func, funcName, funcScope) {\n    return cacheRequest(func, funcName, funcScope, this);\n  }\n\n  /**\n   * Wrap request to prevent multiple calls with same params when request is waiting for response.\n   */\n  proxyfy(func, funcName, funcScope) {\n    if (!this.promises[funcName]) {\n      this.promises[funcName] = {};\n    }\n    const promiseKeeper = this.promises[funcName];\n    return callOnce(func, promiseKeeper, funcScope);\n  }\n\n  proxyfyWithCache(func, funcName, funcScope) {\n    let proxyfied = this.proxyfy(func, funcName, funcScope);\n    return this.cacheRequest(proxyfied, funcName, funcScope);\n  }\n\n  _isExpired(cacheObject) {\n    if (cacheObject) {\n      let object_age = Date.now() - cacheObject.timestamp;\n      return !(cacheObject.timestamp && object_age < this.ttl);\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Wrap request to prevent multiple calls\n * with same params when waiting for result.\n */\nfunction callOnce(func, promiseKeeper, funcScope) {\n  return function() {\n    var hash = getRequestHash(arguments);\n    if (!promiseKeeper[hash]) {\n      promiseKeeper[hash] = Promise.resolve(\n        func.apply(funcScope, arguments)\n        .then(result => {\n          promiseKeeper[hash] = null;\n          return result;\n        })\n      );\n    }\n    return promiseKeeper[hash];\n  };\n}\n\nfunction cacheRequest(func, funcName, funcScope, self) {\n  return function() {\n    if (!self.cache[funcName]) {\n      self.cache[funcName] = {};\n    }\n\n    let cacheObject = self.cache[funcName];\n    let hash = getRequestHash(arguments);\n    if (self.cacheEnabled && !self._isExpired(cacheObject[hash])) {\n      return Promise.resolve(cacheObject[hash].value);\n    } else {\n      return func.apply(funcScope, arguments)\n      .then(result => {\n        cacheObject[hash] = {\n          value: result,\n          timestamp: Date.now()\n        };\n        return result;\n      });\n    }\n  };\n}\n\nfunction getRequestHash(args) {\n  const argsJson = JSON.stringify(args);\n  return argsJson.getHash();\n}\n\nString.prototype.getHash = function() {\n  var hash = 0, i, chr, len;\n  if (this.length !== 0) {\n    for (i = 0, len = this.length; i < len; i++) {\n      chr   = this.charCodeAt(i);\n      hash  = ((hash << 5) - hash) + chr;\n      hash |= 0; // Convert to 32bit integer\n    }\n  }\n  return hash;\n};\n","import _ from 'lodash';\nimport * as utils from '../../../utils';\nimport { ZabbixAPICore } from './zabbixAPICore';\nimport { ZBX_ACK_ACTION_NONE, ZBX_ACK_ACTION_ACK, ZBX_ACK_ACTION_ADD_MESSAGE } from '../../../constants';\n\n/**\n * Zabbix API Wrapper.\n * Creates Zabbix API instance with given parameters (url, credentials and other).\n * Wraps API calls and provides high-level methods.\n */\nexport class ZabbixAPIConnector {\n  constructor(api_url, username, password, version, basicAuth, withCredentials, backendSrv) {\n    this.url              = api_url;\n    this.username         = username;\n    this.password         = password;\n    this.auth             = '';\n    this.version          = version;\n\n    this.requestOptions = {\n      basicAuth: basicAuth,\n      withCredentials: withCredentials\n    };\n\n    this.loginPromise = null;\n    this.loginErrorCount = 0;\n    this.maxLoginAttempts = 3;\n\n    this.zabbixAPICore = new ZabbixAPICore(backendSrv);\n\n    this.getTrend = this.getTrend_ZBXNEXT1193;\n    //getTrend = getTrend_30;\n  }\n\n  //////////////////////////\n  // Core method wrappers //\n  //////////////////////////\n\n  request(method, params) {\n    return this.zabbixAPICore.request(this.url, method, params, this.requestOptions, this.auth)\n    .catch(error => {\n      if (isNotAuthorized(error.data)) {\n        // Handle auth errors\n        this.loginErrorCount++;\n        if (this.loginErrorCount > this.maxLoginAttempts) {\n          this.loginErrorCount = 0;\n          return null;\n        } else {\n          return this.loginOnce()\n          .then(() => this.request(method, params));\n        }\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  /**\n   * When API unauthenticated or auth token expired each request produce login()\n   * call. But auth token is common to all requests. This function wraps login() method\n   * and call it once. If login() already called just wait for it (return its promise).\n   * @return login promise\n   */\n  loginOnce() {\n    if (!this.loginPromise) {\n      this.loginPromise = Promise.resolve(\n        this.login().then(auth => {\n          this.auth = auth;\n          this.loginPromise = null;\n          return auth;\n        })\n      );\n    }\n    return this.loginPromise;\n  }\n\n  /**\n   * Get authentication token.\n   */\n  login() {\n    return this.zabbixAPICore.login(this.url, this.username, this.password, this.requestOptions);\n  }\n\n  /**\n   * Get Zabbix API version\n   */\n  getVersion() {\n    return this.zabbixAPICore.getVersion(this.url, this.requestOptions);\n  }\n\n  ////////////////////////////////\n  // Zabbix API method wrappers //\n  ////////////////////////////////\n\n  acknowledgeEvent(eventid, message) {\n    const action = this.version >= 4 ? ZBX_ACK_ACTION_ACK + ZBX_ACK_ACTION_ADD_MESSAGE : ZBX_ACK_ACTION_NONE;\n    const params = {\n      eventids: eventid,\n      message: message,\n      action: action\n    };\n\n    return this.request('event.acknowledge', params);\n  }\n\n  getGroups() {\n    var params = {\n      output: ['name'],\n      sortfield: 'name',\n      real_hosts: true\n    };\n\n    return this.request('hostgroup.get', params);\n  }\n\n  getHosts(groupids) {\n    var params = {\n      output: ['name', 'host'],\n      sortfield: 'name'\n    };\n    if (groupids) {\n      params.groupids = groupids;\n    }\n\n    return this.request('host.get', params);\n  }\n\n  getApps(hostids) {\n    var params = {\n      output: 'extend',\n      hostids: hostids\n    };\n\n    return this.request('application.get', params);\n  }\n\n  /**\n   * Get Zabbix items\n   * @param  {[type]} hostids  host ids\n   * @param  {[type]} appids   application ids\n   * @param  {String} itemtype 'num' or 'text'\n   * @return {[type]}          array of items\n   */\n  getItems(hostids, appids, itemtype) {\n    var params = {\n      output: [\n        'name', 'key_',\n        'value_type',\n        'hostid',\n        'status',\n        'state'\n      ],\n      sortfield: 'name',\n      webitems: true,\n      filter: {},\n      selectHosts: ['hostid', 'name']\n    };\n    if (hostids) {\n      params.hostids = hostids;\n    }\n    if (appids) {\n      params.applicationids = appids;\n    }\n    if (itemtype === 'num') {\n      // Return only numeric metrics\n      params.filter.value_type = [0, 3];\n    }\n    if (itemtype === 'text') {\n      // Return only text metrics\n      params.filter.value_type = [1, 2, 4];\n    }\n\n    return this.request('item.get', params)\n    .then(utils.expandItems);\n  }\n\n  getItemsByIDs(itemids) {\n    var params = {\n      itemids: itemids,\n      output: [\n        'name', 'key_',\n        'value_type',\n        'hostid',\n        'status',\n        'state'\n      ],\n      webitems: true,\n      selectHosts: ['hostid', 'name']\n    };\n\n    return this.request('item.get', params)\n    .then(utils.expandItems);\n  }\n\n  getMacros(hostids) {\n    var params = {\n      output: 'extend',\n      hostids: hostids\n    };\n\n    return this.request('usermacro.get', params);\n  }\n\n  getGlobalMacros() {\n    var params = {\n      output: 'extend',\n      globalmacro: true\n    };\n\n    return this.request('usermacro.get', params);\n  }\n\n  getLastValue(itemid) {\n    var params = {\n      output: ['lastvalue'],\n      itemids: itemid\n    };\n    return this.request('item.get', params)\n    .then(items => items.length ? items[0].lastvalue : null);\n  }\n\n  /**\n   * Perform history query from Zabbix API\n   *\n   * @param  {Array}  items       Array of Zabbix item objects\n   * @param  {Number} timeFrom   Time in seconds\n   * @param  {Number} timeTill   Time in seconds\n   * @return {Array}  Array of Zabbix history objects\n   */\n  getHistory(items, timeFrom, timeTill) {\n\n    // Group items by value type and perform request for each value type\n    let grouped_items = _.groupBy(items, 'value_type');\n    let promises = _.map(grouped_items, (items, value_type) => {\n      let itemids = _.map(items, 'itemid');\n      let params = {\n        output: 'extend',\n        history: value_type,\n        itemids: itemids,\n        sortfield: 'clock',\n        sortorder: 'ASC',\n        time_from: timeFrom\n      };\n\n      // Relative queries (e.g. last hour) don't include an end time\n      if (timeTill) {\n        params.time_till = timeTill;\n      }\n\n      return this.request('history.get', params);\n    });\n\n    return Promise.all(promises).then(_.flatten);\n  }\n\n  /**\n   * Perform trends query from Zabbix API\n   * Use trends api extension from ZBXNEXT-1193 patch.\n   *\n   * @param  {Array}  items       Array of Zabbix item objects\n   * @param  {Number} time_from   Time in seconds\n   * @param  {Number} time_till   Time in seconds\n   * @return {Array}  Array of Zabbix trend objects\n   */\n  getTrend_ZBXNEXT1193(items, timeFrom, timeTill) {\n\n    // Group items by value type and perform request for each value type\n    let grouped_items = _.groupBy(items, 'value_type');\n    let promises = _.map(grouped_items, (items, value_type) => {\n      let itemids = _.map(items, 'itemid');\n      let params = {\n        output: 'extend',\n        trend: value_type,\n        itemids: itemids,\n        sortfield: 'clock',\n        sortorder: 'ASC',\n        time_from: timeFrom\n      };\n\n      // Relative queries (e.g. last hour) don't include an end time\n      if (timeTill) {\n        params.time_till = timeTill;\n      }\n\n      return this.request('trend.get', params);\n    });\n\n    return Promise.all(promises).then(_.flatten);\n  }\n\n  getTrend_30(items, time_from, time_till, value_type) {\n    var self = this;\n    var itemids = _.map(items, 'itemid');\n\n    var params = {\n      output: [\"itemid\",\n        \"clock\",\n        value_type\n      ],\n      itemids: itemids,\n      time_from: time_from\n    };\n\n    // Relative queries (e.g. last hour) don't include an end time\n    if (time_till) {\n      params.time_till = time_till;\n    }\n\n    return self.request('trend.get', params);\n  }\n\n  getITService(serviceids) {\n    var params = {\n      output: 'extend',\n      serviceids: serviceids\n    };\n    return this.request('service.get', params);\n  }\n\n  getSLA(serviceids, timeRange) {\n    let [timeFrom, timeTo] = timeRange;\n    var params = {\n      serviceids: serviceids,\n      intervals: [{\n        from: timeFrom,\n        to: timeTo\n      }]\n    };\n    return this.request('service.getsla', params);\n  }\n\n  getTriggers(groupids, hostids, applicationids, options) {\n    let {showTriggers, maintenance, timeFrom, timeTo} = options;\n\n    let params = {\n      output: 'extend',\n      groupids: groupids,\n      hostids: hostids,\n      applicationids: applicationids,\n      expandDescription: true,\n      expandData: true,\n      expandComment: true,\n      monitored: true,\n      skipDependent: true,\n      //only_true: true,\n      filter: {\n        value: 1\n      },\n      selectGroups: ['name'],\n      selectHosts: ['name', 'host', 'maintenance_status', 'proxy_hostid'],\n      selectItems: ['name', 'key_', 'lastvalue'],\n      selectLastEvent: 'extend',\n      selectTags: 'extend'\n    };\n\n    if (showTriggers) {\n      params.filter.value = showTriggers;\n    }\n\n    if (maintenance) {\n      params.maintenance = true;\n    }\n\n    if (timeFrom || timeTo) {\n      params.lastChangeSince = timeFrom;\n      params.lastChangeTill = timeTo;\n    }\n\n    return this.request('trigger.get', params);\n  }\n\n  getEvents(objectids, timeFrom, timeTo, showEvents, limit) {\n    var params = {\n      output: 'extend',\n      time_from: timeFrom,\n      time_till: timeTo,\n      objectids: objectids,\n      select_acknowledges: 'extend',\n      selectHosts: 'extend',\n      value: showEvents,\n    };\n\n    if (limit) {\n      params.limit = limit;\n      params.sortfield = 'clock';\n      params.sortorder = 'DESC';\n    }\n\n    return this.request('event.get', params);\n  }\n\n  getAcknowledges(eventids) {\n    var params = {\n      output: 'extend',\n      eventids: eventids,\n      preservekeys: true,\n      select_acknowledges: 'extend',\n      sortfield: 'clock',\n      sortorder: 'DESC'\n    };\n\n    return this.request('event.get', params)\n    .then(events => {\n      return _.filter(events, (event) => event.acknowledges.length);\n    });\n  }\n\n  getExtendedEventData(eventids) {\n    var params = {\n      output: 'extend',\n      eventids: eventids,\n      preservekeys: true,\n      select_acknowledges: 'extend',\n      selectTags: 'extend',\n      sortfield: 'clock',\n      sortorder: 'DESC'\n    };\n\n    return this.request('event.get', params);\n  }\n\n  getEventAlerts(eventids) {\n    const params = {\n      eventids: eventids,\n      output: [\n        'eventid',\n        'message',\n        'clock',\n        'error'\n      ],\n      selectUsers: true,\n    };\n\n    return this.request('alert.get', params);\n  }\n\n  getAlerts(itemids, timeFrom, timeTo) {\n    var params = {\n      output: 'extend',\n      itemids: itemids,\n      expandDescription: true,\n      expandData: true,\n      expandComment: true,\n      monitored: true,\n      skipDependent: true,\n      //only_true: true,\n      // filter: {\n      //   value: 1\n      // },\n      selectLastEvent: 'extend'\n    };\n\n    if (timeFrom || timeTo) {\n      params.lastChangeSince = timeFrom;\n      params.lastChangeTill = timeTo;\n    }\n\n    return this.request('trigger.get', params);\n  }\n\n  getHostAlerts(hostids, applicationids, options) {\n    let {minSeverity, acknowledged, count, timeFrom, timeTo} = options;\n    let params = {\n      output: 'extend',\n      hostids: hostids,\n      min_severity: minSeverity,\n      filter: { value: 1 },\n      expandDescription: true,\n      expandData: true,\n      expandComment: true,\n      monitored: true,\n      skipDependent: true,\n      selectLastEvent: 'extend',\n      selectGroups: 'extend',\n      selectHosts: ['host', 'name']\n    };\n\n    if (count && acknowledged !== 0 && acknowledged !== 1) {\n      params.countOutput = true;\n    }\n\n    if (applicationids && applicationids.length) {\n      params.applicationids = applicationids;\n    }\n\n    if (timeFrom || timeTo) {\n      params.lastChangeSince = timeFrom;\n      params.lastChangeTill = timeTo;\n    }\n\n    return this.request('trigger.get', params)\n    .then((triggers) => {\n      if (!count || acknowledged === 0 || acknowledged === 1) {\n        triggers = filterTriggersByAcknowledge(triggers, acknowledged);\n        if (count) {\n          triggers = triggers.length;\n        }\n      }\n      return triggers;\n    });\n  }\n\n  getProxies() {\n    var params = {\n      output: ['proxyid', 'host'],\n    };\n\n    return this.request('proxy.get', params);\n  }\n}\n\nfunction filterTriggersByAcknowledge(triggers, acknowledged) {\n  if (acknowledged === 0) {\n    return _.filter(triggers, (trigger) => trigger.lastEvent.acknowledged === \"0\");\n  } else if (acknowledged === 1) {\n    return _.filter(triggers, (trigger) => trigger.lastEvent.acknowledged === \"1\");\n  } else {\n    return triggers;\n  }\n}\n\nfunction isNotAuthorized(message) {\n  return (\n    message === \"Session terminated, re-login, please.\" ||\n    message === \"Not authorised.\" ||\n    message === \"Not authorized.\"\n  );\n}\n","import _ from 'lodash';\nimport { compactQuery } from '../../../utils';\nimport mysql from './mysql';\nimport postgres from './postgres';\nimport dbConnector, { DBConnector, DEFAULT_QUERY_LIMIT, HISTORY_TO_TABLE_MAP, TREND_TO_TABLE_MAP } from '../dbConnector';\n\nconst supportedDatabases = {\n  mysql: 'mysql',\n  postgres: 'postgres'\n};\n\nexport class SQLConnector extends DBConnector {\n  constructor(options, datasourceSrv) {\n    super(options, datasourceSrv);\n\n    this.limit = options.limit || DEFAULT_QUERY_LIMIT;\n    this.sqlDialect = null;\n\n    super.loadDBDataSource()\n    .then(ds => {\n      this.backendSrv = ds.backendSrv;\n      this.loadSQLDialect();\n    });\n  }\n\n  loadSQLDialect() {\n    if (this.datasourceTypeId === supportedDatabases.postgres) {\n      this.sqlDialect = postgres;\n    } else {\n      this.sqlDialect = mysql;\n    }\n  }\n\n  /**\n   * Try to invoke test query for one of Zabbix database tables.\n   */\n  testDataSource() {\n    let testQuery = this.sqlDialect.testQuery();\n    return this.invokeSQLQuery(testQuery);\n  }\n\n  getHistory(items, timeFrom, timeTill, options) {\n    let {intervalMs, consolidateBy} = options;\n    let intervalSec = Math.ceil(intervalMs / 1000);\n\n    consolidateBy = consolidateBy || 'avg';\n    let aggFunction = dbConnector.consolidateByFunc[consolidateBy];\n\n    // Group items by value type and perform request for each value type\n    let grouped_items = _.groupBy(items, 'value_type');\n    let promises = _.map(grouped_items, (items, value_type) => {\n      let itemids = _.map(items, 'itemid').join(', ');\n      let table = HISTORY_TO_TABLE_MAP[value_type];\n      let query = this.sqlDialect.historyQuery(itemids, table, timeFrom, timeTill, intervalSec, aggFunction);\n\n      query = compactQuery(query);\n      return this.invokeSQLQuery(query);\n    });\n\n    return Promise.all(promises).then(results => {\n      return _.flatten(results);\n    });\n  }\n\n  getTrends(items, timeFrom, timeTill, options) {\n    let { intervalMs, consolidateBy } = options;\n    let intervalSec = Math.ceil(intervalMs / 1000);\n\n    consolidateBy = consolidateBy || 'avg';\n    let aggFunction = dbConnector.consolidateByFunc[consolidateBy];\n\n    // Group items by value type and perform request for each value type\n    let grouped_items = _.groupBy(items, 'value_type');\n    let promises = _.map(grouped_items, (items, value_type) => {\n      let itemids = _.map(items, 'itemid').join(', ');\n      let table = TREND_TO_TABLE_MAP[value_type];\n      let valueColumn = _.includes(['avg', 'min', 'max', 'sum'], consolidateBy) ? consolidateBy : 'avg';\n      valueColumn = dbConnector.consolidateByTrendColumns[valueColumn];\n      let query = this.sqlDialect.trendsQuery(itemids, table, timeFrom, timeTill, intervalSec, aggFunction, valueColumn);\n\n      query = compactQuery(query);\n      return this.invokeSQLQuery(query);\n    });\n\n    return Promise.all(promises).then(results => {\n      return _.flatten(results);\n    });\n  }\n\n  invokeSQLQuery(query) {\n    let queryDef = {\n      refId: 'A',\n      format: 'time_series',\n      datasourceId: this.datasourceId,\n      rawSql: query,\n      maxDataPoints: this.limit\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        queries: [queryDef],\n      }\n    })\n    .then(response => {\n      let results = response.data.results;\n      if (results['A']) {\n        return results['A'].series;\n      } else {\n        return null;\n      }\n    });\n  }\n}\n","/**\n * MySQL queries\n */\n\nfunction historyQuery(itemids, table, timeFrom, timeTill, intervalSec, aggFunction) {\n  let time_expression = `clock DIV ${intervalSec} * ${intervalSec}`;\n  let query = `\n    SELECT CAST(itemid AS CHAR) AS metric, ${time_expression} AS time_sec, ${aggFunction}(value) AS value\n    FROM ${table}\n    WHERE itemid IN (${itemids})\n      AND clock > ${timeFrom} AND clock < ${timeTill}\n    GROUP BY ${time_expression}, metric\n    ORDER BY time_sec ASC\n  `;\n  return query;\n}\n\nfunction trendsQuery(itemids, table, timeFrom, timeTill, intervalSec, aggFunction, valueColumn) {\n  let time_expression = `clock DIV ${intervalSec} * ${intervalSec}`;\n  let query = `\n    SELECT CAST(itemid AS CHAR) AS metric, ${time_expression} AS time_sec, ${aggFunction}(${valueColumn}) AS value\n    FROM ${table}\n    WHERE itemid IN (${itemids})\n      AND clock > ${timeFrom} AND clock < ${timeTill}\n    GROUP BY ${time_expression}, metric\n    ORDER BY time_sec ASC\n  `;\n  return query;\n}\n\nconst TEST_QUERY = `SELECT CAST(itemid AS CHAR) AS metric, clock AS time_sec, value_avg AS value FROM trends_uint LIMIT 1`;\n\nfunction testQuery() {\n  return TEST_QUERY;\n}\n\nconst mysql = {\n  historyQuery,\n  trendsQuery,\n  testQuery\n};\n\nexport default mysql;\n","/**\n * Postgres queries\n */\n\nconst ITEMID_FORMAT = 'FM99999999999999999999';\n\nfunction historyQuery(itemids, table, timeFrom, timeTill, intervalSec, aggFunction) {\n  let time_expression = `clock / ${intervalSec} * ${intervalSec}`;\n  let query = `\n    SELECT to_char(itemid, '${ITEMID_FORMAT}') AS metric, ${time_expression} AS time, ${aggFunction}(value) AS value\n    FROM ${table}\n    WHERE itemid IN (${itemids})\n      AND clock > ${timeFrom} AND clock < ${timeTill}\n    GROUP BY 1, 2\n    ORDER BY time ASC\n  `;\n  return query;\n}\n\nfunction trendsQuery(itemids, table, timeFrom, timeTill, intervalSec, aggFunction, valueColumn) {\n  let time_expression = `clock / ${intervalSec} * ${intervalSec}`;\n  let query = `\n    SELECT to_char(itemid, '${ITEMID_FORMAT}') AS metric, ${time_expression} AS time, ${aggFunction}(${valueColumn}) AS value\n    FROM ${table}\n    WHERE itemid IN (${itemids})\n      AND clock > ${timeFrom} AND clock < ${timeTill}\n    GROUP BY 1, 2\n    ORDER BY time ASC\n  `;\n  return query;\n}\n\nconst TEST_QUERY = `\n  SELECT to_char(itemid, '${ITEMID_FORMAT}') AS metric, clock AS time, value_avg AS value\n  FROM trends_uint LIMIT 1\n`;\n\nfunction testQuery() {\n  return TEST_QUERY;\n}\n\nconst postgres = {\n  historyQuery,\n  trendsQuery,\n  testQuery\n};\n\nexport default postgres;\n","import _ from 'lodash';\nimport { compactQuery } from '../../../utils';\nimport { DBConnector, HISTORY_TO_TABLE_MAP, consolidateByTrendColumns } from '../dbConnector';\n\nconst consolidateByFunc = {\n  'avg': 'MEAN',\n  'min': 'MIN',\n  'max': 'MAX',\n  'sum': 'SUM',\n  'count': 'COUNT'\n};\n\nexport class InfluxDBConnector extends DBConnector {\n  constructor(options, datasourceSrv) {\n    super(options, datasourceSrv);\n    this.retentionPolicy = options.retentionPolicy;\n    super.loadDBDataSource().then(ds => {\n      this.influxDS = ds;\n      return ds;\n    });\n  }\n\n  /**\n   * Try to invoke test query for one of Zabbix database tables.\n   */\n  testDataSource() {\n    return this.influxDS.testDatasource();\n  }\n\n  getHistory(items, timeFrom, timeTill, options) {\n    let { intervalMs, consolidateBy, retentionPolicy } = options;\n    const intervalSec = Math.ceil(intervalMs / 1000);\n\n    const range = { timeFrom, timeTill };\n    consolidateBy = consolidateBy || 'avg';\n\n    // Group items by value type and perform request for each value type\n    const grouped_items = _.groupBy(items, 'value_type');\n    const promises = _.map(grouped_items, (items, value_type) => {\n      const itemids = _.map(items, 'itemid');\n      const table = HISTORY_TO_TABLE_MAP[value_type];\n      const query = this.buildHistoryQuery(itemids, table, range, intervalSec, consolidateBy, retentionPolicy);\n      return this.invokeInfluxDBQuery(query);\n    });\n\n    return Promise.all(promises)\n    .then(_.flatten)\n    .then(results => {\n      return handleInfluxHistoryResponse(results);\n    });\n  }\n\n  getTrends(items, timeFrom, timeTill, options) {\n    options.retentionPolicy = this.retentionPolicy;\n    return this.getHistory(items, timeFrom, timeTill, options);\n  }\n\n  buildHistoryQuery(itemids, table, range, intervalSec, aggFunction, retentionPolicy) {\n    const { timeFrom, timeTill } = range;\n    const measurement = retentionPolicy ? `\"${retentionPolicy}\".\"${table}\"` : `\"${table}\"`;\n    let value = 'value';\n    if (retentionPolicy) {\n      value = consolidateByTrendColumns[aggFunction] || 'value_avg';\n    }\n    const aggregation = consolidateByFunc[aggFunction] || aggFunction;\n    const where_clause = this.buildWhereClause(itemids);\n    const query = `SELECT ${aggregation}(\"${value}\") FROM ${measurement}\n      WHERE ${where_clause} AND \"time\" >= ${timeFrom}s AND \"time\" <= ${timeTill}s\n      GROUP BY time(${intervalSec}s), \"itemid\" fill(none)`;\n    return compactQuery(query);\n  }\n\n  buildWhereClause(itemids) {\n    const itemidsWhere = itemids.map(itemid => `\"itemid\" = '${itemid}'`).join(' OR ');\n    return `(${itemidsWhere})`;\n  }\n\n  invokeInfluxDBQuery(query) {\n    return this.influxDS._seriesQuery(query)\n    .then(data => data && data.results ? data.results : []);\n  }\n}\n\n///////////////////////////////////////////////////////////////////////////////\n\nfunction handleInfluxHistoryResponse(results) {\n  if (!results) {\n    return [];\n  }\n\n  const seriesList = [];\n  for (let i = 0; i < results.length; i++) {\n    const result = results[i];\n\n    if (result.error) {\n      const error = `InfluxDB error: ${result.error}`;\n      return Promise.reject(new Error(error));\n    }\n\n    if (!result || !result.series) {\n      continue;\n    }\n\n    const influxSeriesList = results[i].series;\n\n    for (let y = 0; y < influxSeriesList.length; y++) {\n      const influxSeries = influxSeriesList[y];\n      const datapoints = [];\n      if (influxSeries.values) {\n        for (i = 0; i < influxSeries.values.length; i++) {\n          datapoints[i] = [influxSeries.values[i][1], influxSeries.values[i][0]];\n        }\n      }\n      const timeSeries = {\n        name: influxSeries.tags.itemid,\n        points: datapoints\n      };\n      seriesList.push(timeSeries);\n    }\n  }\n\n  return seriesList;\n}\n","import { QueryCtrl } from 'grafana/app/plugins/sdk';\nimport _ from 'lodash';\nimport * as c from './constants';\nimport * as utils from './utils';\nimport * as metricFunctions from './metricFunctions';\nimport * as migrations from './migrations';\n\nexport class ZabbixQueryController extends QueryCtrl {\n\n  /** @ngInject */\n  constructor($scope, $injector, $rootScope, $sce, templateSrv) {\n    super($scope, $injector);\n    this.zabbix = this.datasource.zabbix;\n\n    // Use custom format for template variables\n    this.replaceTemplateVars = this.datasource.replaceTemplateVars;\n    this.templateSrv = templateSrv;\n\n    this.editorModes = [\n      {value: 'num',       text: 'Metrics',     mode: c.MODE_METRICS},\n      {value: 'text',      text: 'Text',        mode: c.MODE_TEXT},\n      {value: 'itservice', text: 'IT Services', mode: c.MODE_ITSERVICE},\n      {value: 'itemid',    text: 'Item ID',     mode: c.MODE_ITEMID},\n      {value: 'triggers',  text: 'Triggers',    mode: c.MODE_TRIGGERS}\n    ];\n\n    this.$scope.editorMode = {\n      METRICS: c.MODE_METRICS,\n      TEXT: c.MODE_TEXT,\n      ITSERVICE: c.MODE_ITSERVICE,\n      ITEMID: c.MODE_ITEMID,\n      TRIGGERS: c.MODE_TRIGGERS\n    };\n\n    this.slaPropertyList = [\n      {name: \"Status\", property: \"status\"},\n      {name: \"SLA\", property: \"sla\"},\n      {name: \"OK time\", property: \"okTime\"},\n      {name: \"Problem time\", property: \"problemTime\"},\n      {name: \"Down time\", property: \"downtimeTime\"}\n    ];\n\n    this.ackFilters = [\n      {text: 'all triggers', value: 2},\n      {text: 'unacknowledged', value: 0},\n      {text: 'acknowledged', value: 1},\n    ];\n\n    this.resultFormats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n\n    this.triggerSeverity = c.TRIGGER_SEVERITY;\n\n    // Map functions for bs-typeahead\n    this.getGroupNames = _.bind(this.getMetricNames, this, 'groupList');\n    this.getHostNames = _.bind(this.getMetricNames, this, 'hostList', true);\n    this.getApplicationNames = _.bind(this.getMetricNames, this, 'appList');\n    this.getItemNames = _.bind(this.getMetricNames, this, 'itemList');\n    this.getITServices = _.bind(this.getMetricNames, this, 'itServiceList');\n    this.getVariables = _.bind(this.getTemplateVariables, this);\n\n    // Update metric suggestion when template variable was changed\n    $rootScope.$on('template-variable-value-updated', () => this.onVariableChange());\n\n    // Update metrics when item selected from dropdown\n    $scope.$on('typeahead-updated', () => {\n      this.onTargetBlur();\n    });\n\n    this.init = function() {\n      var target = this.target;\n\n      // Migrate old targets\n      target = migrations.migrate(target);\n\n      var scopeDefaults = {\n        metric: {},\n        oldTarget: _.cloneDeep(this.target),\n        queryOptionsText: this.renderQueryOptionsText()\n      };\n      _.defaults(this, scopeDefaults);\n\n      // Load default values\n      var targetDefaults = {\n        'mode': c.MODE_METRICS,\n        'group': { 'filter': \"\" },\n        'host': { 'filter': \"\" },\n        'application': { 'filter': \"\" },\n        'item': { 'filter': \"\" },\n        'functions': [],\n        'triggers': {\n          'count': true,\n          'minSeverity': 3,\n          'acknowledged': 2\n        },\n        'options': {\n          'showDisabledItems': false,\n          'skipEmptyValues': false\n        },\n        'table': {\n          'skipEmptyValues': false\n        }\n      };\n      _.defaults(target, targetDefaults);\n\n      // Create function instances from saved JSON\n      target.functions = _.map(target.functions, function(func) {\n        return metricFunctions.createFuncInstance(func.def, func.params);\n      });\n\n      if (target.mode === c.MODE_METRICS ||\n          target.mode === c.MODE_TEXT ||\n          target.mode === c.MODE_TRIGGERS) {\n        this.initFilters();\n      }\n      else if (target.mode === c.MODE_ITSERVICE) {\n        _.defaults(target, {slaProperty: {name: \"SLA\", property: \"sla\"}});\n        this.suggestITServices();\n      }\n    };\n\n    this.init();\n    this.queryOptionsText = this.renderQueryOptionsText();\n  }\n\n  initFilters() {\n    let itemtype = _.find(this.editorModes, {'mode': this.target.mode});\n    itemtype = itemtype ? itemtype.value : null;\n    return Promise.all([\n      this.suggestGroups(),\n      this.suggestHosts(),\n      this.suggestApps(),\n      this.suggestItems(itemtype)\n    ]);\n  }\n\n  // Get list of metric names for bs-typeahead directive\n  getMetricNames(metricList, addAllValue) {\n    let metrics = _.uniq(_.map(this.metric[metricList], 'name'));\n\n    // Add template variables\n    _.forEach(this.templateSrv.variables, variable => {\n      metrics.unshift('$' + variable.name);\n    });\n\n    if (addAllValue) {\n      metrics.unshift('/.*/');\n    }\n\n    return metrics;\n  }\n\n  getTemplateVariables() {\n    return _.map(this.templateSrv.variables, variable => {\n      return '$' + variable.name;\n    });\n  }\n\n  suggestGroups() {\n    return this.zabbix.getAllGroups()\n    .then(groups => {\n      this.metric.groupList = groups;\n      return groups;\n    });\n  }\n\n  suggestHosts() {\n    let groupFilter = this.replaceTemplateVars(this.target.group.filter);\n    return this.zabbix.getAllHosts(groupFilter)\n    .then(hosts => {\n      this.metric.hostList = hosts;\n      return hosts;\n    });\n  }\n\n  suggestApps() {\n    let groupFilter = this.replaceTemplateVars(this.target.group.filter);\n    let hostFilter = this.replaceTemplateVars(this.target.host.filter);\n    return this.zabbix.getAllApps(groupFilter, hostFilter)\n    .then(apps => {\n      this.metric.appList = apps;\n      return apps;\n    });\n  }\n\n  suggestItems(itemtype = 'num') {\n    let groupFilter = this.replaceTemplateVars(this.target.group.filter);\n    let hostFilter = this.replaceTemplateVars(this.target.host.filter);\n    let appFilter = this.replaceTemplateVars(this.target.application.filter);\n    let options = {\n      itemtype: itemtype,\n      showDisabledItems: this.target.options.showDisabledItems\n    };\n\n    return this.zabbix\n    .getAllItems(groupFilter, hostFilter, appFilter, options)\n    .then(items => {\n      this.metric.itemList = items;\n      return items;\n    });\n  }\n\n  suggestITServices() {\n    return this.zabbix.getITService()\n    .then(itservices => {\n      this.metric.itServiceList = itservices;\n      return itservices;\n    });\n  }\n\n  isRegex(str) {\n    return utils.isRegex(str);\n  }\n\n  isVariable(str) {\n    return utils.isTemplateVariable(str, this.templateSrv.variables);\n  }\n\n  onTargetBlur() {\n    var newTarget = _.cloneDeep(this.target);\n    if (!_.isEqual(this.oldTarget, this.target)) {\n      this.oldTarget = newTarget;\n      this.targetChanged();\n    }\n  }\n\n  onVariableChange() {\n    if (this.isContainsVariables()) {\n      this.targetChanged();\n    }\n  }\n\n  /**\n   * Check query for template variables\n   */\n  isContainsVariables() {\n    return _.some(['group', 'host', 'application'], field => {\n      if (this.target[field] && this.target[field].filter) {\n        return utils.isTemplateVariable(this.target[field].filter, this.templateSrv.variables);\n      } else {\n        return false;\n      }\n    });\n  }\n\n  parseTarget() {\n    // Parse target\n  }\n\n  // Validate target and set validation info\n  validateTarget() {\n    // validate\n  }\n\n  targetChanged() {\n    this.initFilters();\n    this.parseTarget();\n    this.panelCtrl.refresh();\n  }\n\n  addFunction(funcDef) {\n    var newFunc = metricFunctions.createFuncInstance(funcDef);\n    newFunc.added = true;\n    this.target.functions.push(newFunc);\n\n    this.moveAliasFuncLast();\n\n    if (newFunc.params.length && newFunc.added ||\n        newFunc.def.params.length === 0) {\n      this.targetChanged();\n    }\n  }\n\n  removeFunction(func) {\n    this.target.functions = _.without(this.target.functions, func);\n    this.targetChanged();\n  }\n\n  moveFunction(func, offset) {\n    const index = this.target.functions.indexOf(func);\n    _.move(this.target.functions, index, index + offset);\n    this.targetChanged();\n  }\n\n  moveAliasFuncLast() {\n    var aliasFunc = _.find(this.target.functions, func => {\n      return func.def.category === 'Alias';\n    });\n\n    if (aliasFunc) {\n      this.target.functions = _.without(this.target.functions, aliasFunc);\n      this.target.functions.push(aliasFunc);\n    }\n  }\n\n  toggleQueryOptions() {\n    this.showQueryOptions = !this.showQueryOptions;\n  }\n\n  onQueryOptionChange() {\n    this.queryOptionsText = this.renderQueryOptionsText();\n    this.onTargetBlur();\n  }\n\n  renderQueryOptionsText() {\n    var optionsMap = {\n      showDisabledItems: \"Show disabled items\",\n      skipEmptyValues: \"Skip empty values\"\n    };\n    var options = [];\n    _.forOwn(this.target.options, (value, key) => {\n      if (value) {\n        if (value === true) {\n          // Show only option name (if enabled) for boolean options\n          options.push(optionsMap[key]);\n        } else {\n          // Show \"option = value\" for another options\n          options.push(optionsMap[key] + \" = \" + value);\n        }\n      }\n    });\n    return \"Options: \" + options.join(', ');\n  }\n\n  /**\n   * Switch query editor to specified mode.\n   * Modes:\n   *  0 - items\n   *  1 - IT services\n   *  2 - Text metrics\n   */\n  switchEditorMode(mode) {\n    this.target.mode = mode;\n    this.init();\n    this.targetChanged();\n  }\n}\n","import _ from 'lodash';\nimport { migrateDSConfig } from './migrations';\n\nconst SUPPORTED_SQL_DS = ['mysql', 'postgres', 'influxdb'];\n\nconst zabbixVersions = [\n  { name: '2.x', value: 2 },\n  { name: '3.x', value: 3 },\n  { name: '4.x', value: 4 },\n];\n\nconst defaultConfig = {\n  trends: false,\n  dbConnectionEnable: false,\n  dbConnectionDatasourceId: null,\n  alerting: false,\n  addThresholds: false,\n  alertingMinSeverity: 3,\n  disableReadOnlyUsersAck: false,\n  zabbixVersion: 3,\n};\n\nexport class ZabbixDSConfigController {\n\n  /** @ngInject */\n  constructor($scope, $injector, datasourceSrv) {\n    this.datasourceSrv = datasourceSrv;\n\n    this.current.jsonData = migrateDSConfig(this.current.jsonData);\n    _.defaults(this.current.jsonData, defaultConfig);\n\n    this.dbConnectionDatasourceId = this.current.jsonData.dbConnectionDatasourceId;\n    this.dbDataSources = this.getSupportedDBDataSources();\n    this.zabbixVersions = _.cloneDeep(zabbixVersions);\n    this.autoDetectZabbixVersion();\n    if (!this.dbConnectionDatasourceId) {\n      this.loadCurrentDBDatasource();\n    }\n  }\n\n  getSupportedDBDataSources() {\n    let datasources = this.datasourceSrv.getAll();\n    return _.filter(datasources, ds => {\n      return _.includes(SUPPORTED_SQL_DS, ds.type);\n    });\n  }\n\n  getCurrentDatasourceType() {\n    const dsId = this.dbConnectionDatasourceId;\n    const currentDs = _.find(this.dbDataSources, { 'id': dsId });\n    return currentDs ? currentDs.type : null;\n  }\n\n  loadCurrentDBDatasource() {\n    const dsName= this.current.jsonData.dbConnectionDatasourceName;\n    this.datasourceSrv.loadDatasource(dsName)\n    .then(ds => {\n      if (ds) {\n        this.dbConnectionDatasourceId = ds.id;\n      }\n    });\n  }\n\n  autoDetectZabbixVersion() {\n    if (!this.current.id) {\n      return;\n    }\n\n    this.datasourceSrv.loadDatasource(this.current.name)\n    .then(ds => {\n      return ds.getVersion();\n    })\n    .then(version => {\n      if (version) {\n        if (!_.find(zabbixVersions, ['value', version])) {\n          this.zabbixVersions.push({ name: version + '.x', value: version });\n        }\n        this.current.jsonData.zabbixVersion = version;\n      }\n    });\n  }\n\n  onDBConnectionDatasourceChange() {\n    this.current.jsonData.dbConnectionDatasourceId = this.dbConnectionDatasourceId;\n  }\n}\n","import _ from 'lodash';\nimport $ from 'jquery';\nimport angular from 'angular';\n\nclass ZabbixAlertingService {\n\n  /** @ngInject */\n  constructor(dashboardSrv) {\n    this.dashboardSrv = dashboardSrv;\n  }\n\n  isFullScreen() {\n    return this.getDashboardModel().meta.fullscreen;\n  }\n\n  setPanelAlertState(panelId, alertState) {\n    let panelIndex;\n\n    let panelContainers = _.filter($('.panel-container'), elem => {\n      return elem.clientHeight && elem.clientWidth;\n    });\n\n    let panelModels = this.getPanelModels();\n\n    if (this.isFullScreen()) {\n      panelIndex = 0;\n    } else {\n      panelIndex = _.findIndex(panelModels, panel => {\n        return panel.id === panelId;\n      });\n    }\n\n    if (panelIndex >= 0) {\n      let alertClass = \"panel-has-alert panel-alert-state--ok panel-alert-state--alerting\";\n      $(panelContainers[panelIndex]).removeClass(alertClass);\n\n      if (alertState) {\n        alertClass = \"panel-has-alert panel-alert-state--\" + alertState;\n        $(panelContainers[panelIndex]).addClass(alertClass);\n      }\n    }\n  }\n\n  getDashboardModel() {\n    return this.dashboardSrv.dash || this.dashboardSrv.dashboard;\n  }\n\n  getPanelModels() {\n    return _.filter(this.getDashboardModel().panels, panel => panel.type !== 'row');\n  }\n\n  getPanelModel(panelId) {\n    let panelModels = this.getPanelModels();\n\n    return _.find(panelModels, panel => {\n      return panel.id === panelId;\n    });\n  }\n\n  setPanelThreshold(panelId, threshold) {\n    let panel = this.getPanelModel(panelId);\n    let containsThreshold = _.find(panel.thresholds, {value: threshold});\n\n    if (panel && panel.type === \"graph\" && !containsThreshold) {\n      let thresholdOptions = {\n        colorMode : \"custom\",\n        fill : false,\n        line : true,\n        lineColor: \"rgb(255, 0, 0)\",\n        op: \"gt\",\n        value: threshold,\n        source: \"zabbix\"\n      };\n\n      panel.thresholds.push(thresholdOptions);\n    }\n  }\n\n  removeZabbixThreshold(panelId) {\n    let panel = this.getPanelModel(panelId);\n\n    if (panel && panel.type === \"graph\") {\n      panel.thresholds = _.filter(panel.thresholds, threshold => {\n        return threshold.source !== \"zabbix\";\n      });\n    }\n  }\n\n}\n\nangular\n  .module('grafana.services')\n  .service('zabbixAlertingSrv', ZabbixAlertingService);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport * as metricFunctions from './metricFunctions';\n\nangular\n  .module('grafana.directives')\n  .directive('addMetricFunction',\n\n  /** @ngInject */\n  function($compile) {\n    var inputTemplate = '<input type=\"text\"'+\n                          ' class=\"gf-form-input\"' +\n                          ' spellcheck=\"false\" style=\"display:none\"></input>';\n\n    var buttonTemplate = '<a  class=\"gf-form-label tight-form-func dropdown-toggle query-part\"' +\n                            ' tabindex=\"1\" gf-dropdown=\"functionMenu\" data-toggle=\"dropdown\">' +\n                            '<i class=\"fa fa-plus\"></i></a>';\n\n    return {\n      link: function($scope, elem) {\n        var categories = metricFunctions.getCategories();\n        var allFunctions = getAllFunctionNames(categories);\n\n        $scope.functionMenu = createFunctionDropDownMenu(categories);\n\n        var $input = $(inputTemplate);\n        var $button = $(buttonTemplate);\n        $input.appendTo(elem);\n        $button.appendTo(elem);\n\n        $input.attr('data-provide', 'typeahead');\n        $input.typeahead({\n          source: allFunctions,\n          minLength: 1,\n          items: 10,\n          updater: function (value) {\n            var funcDef = metricFunctions.getFuncDef(value);\n            if (!funcDef) {\n              // try find close match\n              value = value.toLowerCase();\n              funcDef = _.find(allFunctions, function(funcName) {\n                return funcName.toLowerCase().indexOf(value) === 0;\n              });\n\n              if (!funcDef) { return; }\n            }\n\n            $scope.$apply(function() {\n              $scope.addFunction(funcDef);\n            });\n\n            $input.trigger('blur');\n            return '';\n          }\n        });\n\n        $button.click(function() {\n          $button.hide();\n          $input.show();\n          $input.focus();\n        });\n\n        $input.keyup(function() {\n          elem.toggleClass('open', $input.val() === '');\n        });\n\n        $input.blur(function() {\n          // clicking the function dropdown menu won't\n          // work if you remove class at once\n          setTimeout(function() {\n            $input.val('');\n            $input.hide();\n            $button.show();\n            elem.removeClass('open');\n          }, 200);\n        });\n\n        $compile(elem.contents())($scope);\n      }\n    };\n  });\n\nfunction getAllFunctionNames(categories) {\n  return _.reduce(categories, function(list, category) {\n    _.each(category, function(func) {\n      list.push(func.name);\n    });\n    return list;\n  }, []);\n}\n\nfunction createFunctionDropDownMenu(categories) {\n  return _.map(categories, function(list, category) {\n    return {\n      text: category,\n      submenu: _.map(list, function(value) {\n        return {\n          text: value.name,\n          click: \"ctrl.addFunction('\" + value.name + \"')\",\n        };\n      })\n    };\n  });\n}\n\n","import coreModule from 'grafana/app/core/core_module';\n\nexport function react2AngularDirective(name: string, component: any, options: any) {\n  coreModule.directive(name, [\n    'reactDirective',\n    reactDirective => {\n      return reactDirective(component, options);\n    },\n  ]);\n}\n","import React from 'react';\n\nconst DOCS_FUNC_REF_URL = 'https://alexanderzobnin.github.io/grafana-zabbix/reference/functions/';\n\nexport interface FunctionDescriptor {\n  text: string;\n  params: string[];\n  def: {\n    category: string;\n    defaultParams: string[];\n    description?: string;\n    fake: boolean;\n    name: string;\n    params: string[];\n  };\n}\n\nexport interface FunctionEditorControlsProps {\n  onMoveLeft: (func: FunctionDescriptor) => void;\n  onMoveRight: (func: FunctionDescriptor) => void;\n  onRemove: (func: FunctionDescriptor) => void;\n}\n\nconst FunctionHelpButton = (props: { description: string; name: string; onDescriptionShow: () => void }) => {\n  if (props.description) {\n    return <span className=\"pointer fa fa-question-circle\" onClick={props.onDescriptionShow} />;\n  }\n\n  return (\n    <span\n      className=\"pointer fa fa-question-circle\"\n      onClick={() => {\n        window.open(\n          DOCS_FUNC_REF_URL + '#' + props.name,\n          '_blank'\n        );\n      }}\n    />\n  );\n};\n\nexport const FunctionEditorControls = (\n  props: FunctionEditorControlsProps & {\n    func: FunctionDescriptor;\n    onDescriptionShow: () => void;\n  }\n) => {\n  const { func, onMoveLeft, onMoveRight, onRemove, onDescriptionShow } = props;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        width: '60px',\n        justifyContent: 'space-between',\n      }}\n    >\n      <span className=\"pointer fa fa-arrow-left\" onClick={() => onMoveLeft(func)} />\n      <FunctionHelpButton\n        name={func.def.name}\n        description={func.def.description}\n        onDescriptionShow={onDescriptionShow}\n      />\n      <span className=\"pointer fa fa-remove\" onClick={() => onRemove(func)} />\n      <span className=\"pointer fa fa-arrow-right\" onClick={() => onMoveRight(func)} />\n    </div>\n  );\n};\n","import React from 'react';\n// import rst2html from 'rst2html';\nimport { FunctionDescriptor, FunctionEditorControlsProps, FunctionEditorControls } from './FunctionEditorControls';\n\n// @ts-ignore\nimport { PopperController, Popper } from '@grafana/ui';\n\ninterface FunctionEditorProps extends FunctionEditorControlsProps {\n  func: FunctionDescriptor;\n}\n\ninterface FunctionEditorState {\n  showingDescription: boolean;\n}\n\nclass FunctionEditor extends React.PureComponent<FunctionEditorProps, FunctionEditorState> {\n  private triggerRef = React.createRef<HTMLSpanElement>();\n\n  constructor(props: FunctionEditorProps) {\n    super(props);\n\n    this.state = {\n      showingDescription: false,\n    };\n  }\n\n  renderContent = ({ updatePopperPosition }) => {\n    const {\n      onMoveLeft,\n      onMoveRight,\n      func: {\n        def: { name, description },\n      },\n    } = this.props;\n    const { showingDescription } = this.state;\n\n    if (showingDescription) {\n      return (\n        <div style={{ overflow: 'auto', maxHeight: '30rem', textAlign: 'left', fontWeight: 'normal' }}>\n          <h4 style={{ color: 'white' }}> {name} </h4>\n          <div>{description}</div>\n          />\n        </div>\n      );\n    }\n\n    return (\n      <FunctionEditorControls\n        {...this.props}\n        onMoveLeft={() => {\n          onMoveLeft(this.props.func);\n          updatePopperPosition();\n        }}\n        onMoveRight={() => {\n          onMoveRight(this.props.func);\n          updatePopperPosition();\n        }}\n        onDescriptionShow={() => {\n          this.setState({ showingDescription: true }, () => {\n            updatePopperPosition();\n          });\n        }}\n      />\n    );\n  };\n\n  render() {\n    return (\n      <PopperController content={this.renderContent} placement=\"top\" hideAfter={300}>\n        {(showPopper, hidePopper, popperProps) => {\n          return (\n            <>\n              {this.triggerRef && (\n                <Popper\n                  {...popperProps}\n                  referenceElement={this.triggerRef.current}\n                  wrapperClassName=\"popper\"\n                  className=\"popper__background\"\n                  onMouseLeave={() => {\n                    this.setState({ showingDescription: false });\n                    hidePopper();\n                  }}\n                  onMouseEnter={showPopper}\n                  renderArrow={({ arrowProps, placement }) => (\n                    <div className=\"popper__arrow\" data-placement={placement} {...arrowProps} />\n                  )}\n                />\n              )}\n\n              <span\n                ref={this.triggerRef}\n                onClick={popperProps.show ? hidePopper : showPopper}\n                onMouseLeave={() => {\n                  hidePopper();\n                  this.setState({ showingDescription: false });\n                }}\n                style={{ cursor: 'pointer' }}\n              >\n                {this.props.func.def.name}\n              </span>\n            </>\n          );\n        }}\n      </PopperController>\n    );\n  }\n}\n\nexport { FunctionEditor };\n","import coreModule from 'grafana/app/core/core_module';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport { react2AngularDirective } from './react2angular';\nimport { FunctionEditor } from './components/FunctionEditor';\n\n/** @ngInject */\nexport function zabbixFunctionEditor($compile, templateSrv) {\n  const funcSpanTemplate = `\n    <zbx-function-editor\n      func=\"func\"\n      onRemove=\"ctrl.handleRemoveFunction\"\n      onMoveLeft=\"ctrl.handleMoveLeft\"\n      onMoveRight=\"ctrl.handleMoveRight\"\n    /><span>(</span>\n  `;\n  const paramTemplate =\n    '<input type=\"text\" style=\"display:none\"' + ' class=\"input-small tight-form-func-param\"></input>';\n\n  return {\n    restrict: 'A',\n    link: function postLink($scope, elem) {\n      const $funcLink = $(funcSpanTemplate);\n      const ctrl = $scope.ctrl;\n      const func = $scope.func;\n      let scheduledRelink = false;\n      let paramCountAtLink = 0;\n      let cancelBlur = null;\n\n      ctrl.handleRemoveFunction = func => {\n        ctrl.removeFunction(func);\n      };\n\n      ctrl.handleMoveLeft = func => {\n        ctrl.moveFunction(func, -1);\n      };\n\n      ctrl.handleMoveRight = func => {\n        ctrl.moveFunction(func, 1);\n      };\n\n      function clickFuncParam(this: any, paramIndex) {\n        /*jshint validthis:true */\n\n        const $link = $(this);\n        const $comma = $link.prev('.comma');\n        const $input = $link.next();\n\n        $input.val(func.params[paramIndex]);\n\n        $comma.removeClass('query-part__last');\n        $link.hide();\n        $input.show();\n        $input.focus();\n        $input.select();\n\n        const typeahead = $input.data('typeahead');\n        if (typeahead) {\n          $input.val('');\n          typeahead.lookup();\n        }\n      }\n\n      function scheduledRelinkIfNeeded() {\n        if (paramCountAtLink === func.params.length) {\n          return;\n        }\n\n        if (!scheduledRelink) {\n          scheduledRelink = true;\n          setTimeout(() => {\n            relink();\n            scheduledRelink = false;\n          }, 200);\n        }\n      }\n\n      function paramDef(index) {\n        if (index < func.def.params.length) {\n          return func.def.params[index];\n        }\n        if ((_.last(func.def.params) as any).multiple) {\n          return _.assign({}, _.last(func.def.params), { optional: true });\n        }\n        return {};\n      }\n\n      function switchToLink(inputElem, paramIndex) {\n        /*jshint validthis:true */\n        const $input = $(inputElem);\n\n        clearTimeout(cancelBlur);\n        cancelBlur = null;\n\n        const $link = $input.prev();\n        const $comma = $link.prev('.comma');\n        const newValue = $input.val();\n\n        // remove optional empty params\n        if (newValue !== '' || paramDef(paramIndex).optional) {\n          func.updateParam(newValue, paramIndex);\n          $link.html(newValue ? templateSrv.highlightVariablesAsHtml(newValue) : '&nbsp;');\n        }\n\n        scheduledRelinkIfNeeded();\n\n        $scope.$apply(() => {\n          ctrl.targetChanged();\n        });\n\n        if ($link.hasClass('query-part__last') && newValue === '') {\n          $comma.addClass('query-part__last');\n        } else {\n          $link.removeClass('query-part__last');\n        }\n\n        $input.hide();\n        $link.show();\n      }\n\n      // this = input element\n      function inputBlur(this: any, paramIndex) {\n        /*jshint validthis:true */\n        const inputElem = this;\n        // happens long before the click event on the typeahead options\n        // need to have long delay because the blur\n        cancelBlur = setTimeout(() => {\n          switchToLink(inputElem, paramIndex);\n        }, 200);\n      }\n\n      function inputKeyPress(this: any, paramIndex, e) {\n        /*jshint validthis:true */\n        if (e.which === 13) {\n          $(this).blur();\n        }\n      }\n\n      function inputKeyDown(this: any) {\n        /*jshint validthis:true */\n        this.style.width = (3 + this.value.length) * 8 + 'px';\n      }\n\n      function addTypeahead($input, paramIndex) {\n        $input.attr('data-provide', 'typeahead');\n\n        let options = paramDef(paramIndex).options;\n        if (paramDef(paramIndex).type === 'int' || paramDef(paramIndex).type === 'float') {\n          options = _.map(options, val => {\n            return val.toString();\n          });\n        }\n\n        $input.typeahead({\n          source: options,\n          minLength: 0,\n          items: 20,\n          updater: value => {\n            $input.val(value);\n            switchToLink($input[0], paramIndex);\n            return value;\n          },\n        });\n\n        const typeahead = $input.data('typeahead');\n        typeahead.lookup = function() {\n          this.query = this.$element.val() || '';\n          return this.process(this.source);\n        };\n      }\n\n      function addElementsAndCompile() {\n        $funcLink.appendTo(elem);\n\n        const defParams: any = _.clone(func.def.params);\n        const lastParam: any = _.last(func.def.params);\n\n        while (func.params.length >= defParams.length && lastParam && lastParam.multiple) {\n          defParams.push(_.assign({}, lastParam, { optional: true }));\n        }\n\n        _.each(defParams, (param: any, index: number) => {\n          if (param.optional && func.params.length < index) {\n            return false;\n          }\n\n          let paramValue = templateSrv.highlightVariablesAsHtml(func.params[index]);\n          const hasValue = paramValue !== null && paramValue !== undefined;\n\n          const last = index >= func.params.length - 1 && param.optional && !hasValue;\n          if (last && param.multiple) {\n            paramValue = '+';\n          }\n\n          if (index > 0) {\n            $('<span class=\"comma' + (last ? ' query-part__last' : '') + '\">, </span>').appendTo(elem);\n          }\n\n          const $paramLink = $(\n            '<a ng-click=\"\" class=\"graphite-func-param-link' +\n              (last ? ' query-part__last' : '') +\n              '\">' +\n              (hasValue ? paramValue : '&nbsp;') +\n              '</a>'\n          );\n          const $input = $(paramTemplate);\n          $input.attr('placeholder', param.name);\n\n          paramCountAtLink++;\n\n          $paramLink.appendTo(elem);\n          $input.appendTo(elem);\n\n          $input.blur(_.partial(inputBlur, index));\n          $input.keyup(inputKeyDown);\n          $input.keypress(_.partial(inputKeyPress, index));\n          $paramLink.click(_.partial(clickFuncParam, index));\n\n          if (param.options) {\n            addTypeahead($input, index);\n          }\n\n          return true;\n        });\n\n        $('<span>)</span>').appendTo(elem);\n\n        $compile(elem.contents())($scope);\n      }\n\n      function ifJustAddedFocusFirstParam() {\n        if ($scope.func.added) {\n          $scope.func.added = false;\n          setTimeout(() => {\n            elem\n              .find('.graphite-func-param-link')\n              .first()\n              .click();\n          }, 10);\n        }\n      }\n\n      function relink() {\n        elem.children().remove();\n        addElementsAndCompile();\n        ifJustAddedFocusFirstParam();\n      }\n\n      relink();\n    },\n  };\n}\n\ncoreModule.directive('zabbixFunctionEditor', zabbixFunctionEditor);\n\nreact2AngularDirective('zbxFunctionEditor', FunctionEditor, ['func', 'onRemove', 'onMoveLeft', 'onMoveRight']);\n"],"sourceRoot":""}